/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DayBlueprint from '../models/DayBlueprint';
import DayComponentsMapper from '../models/DayComponentsMapper';
import DayDTO from '../models/DayDTO';
import DayInstance from '../models/DayInstance';
import Finances from '../models/Finances';
import Members from '../models/Members';
import ProjectBlueprint from '../models/ProjectBlueprint';
import ProjectDTO from '../models/ProjectDTO';
import ProjectDaysMapper from '../models/ProjectDaysMapper';
import ProjectInstance from '../models/ProjectInstance';

/**
* Default service.
* @module api-course-service/controllers/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api-course-service/controllers/DefaultApi
    * @class
    * @param {module:api-course-service/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:api-course-service/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dayComponentsMapperDayBlueprintUuidComponentUuidDelete operation.
     * @callback module:api-course-service/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete day-component mapping (admin only)
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} componentUuid Component UUID in the path
     * @param {module:api-course-service/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dayComponentsMapperDayBlueprintUuidComponentUuidDelete(dayBlueprintUuid, componentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidDelete");
      }
      // verify the required parameter 'componentUuid' is set
      if (componentUuid === undefined || componentUuid === null) {
        throw new Error("Missing the required parameter 'componentUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidDelete");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'component_uuid': componentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/day-components-mapper/{day_blueprint_uuid}/{component_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayComponentsMapperDayBlueprintUuidComponentUuidGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/DayComponentsMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific day-component mapping
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} componentUuid Component UUID in the path
     * @param {module:api-course-service/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/DayComponentsMapper}
     */
    dayComponentsMapperDayBlueprintUuidComponentUuidGet(dayBlueprintUuid, componentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidGet");
      }
      // verify the required parameter 'componentUuid' is set
      if (componentUuid === undefined || componentUuid === null) {
        throw new Error("Missing the required parameter 'componentUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidGet");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'component_uuid': componentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DayComponentsMapper;
      return this.apiClient.callApi(
        '/day-components-mapper/{day_blueprint_uuid}/{component_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayComponentsMapperDayBlueprintUuidComponentUuidPut operation.
     * @callback module:api-course-service/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/DayComponentsMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a day-component mapping (admin only)
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} componentUuid Component UUID in the path
     * @param {module:api-course-service/models/DayComponentsMapper} dayComponentsMapper 
     * @param {module:api-course-service/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/DayComponentsMapper}
     */
    dayComponentsMapperDayBlueprintUuidComponentUuidPut(dayBlueprintUuid, componentUuid, dayComponentsMapper, callback) {
      let postBody = dayComponentsMapper;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidPut");
      }
      // verify the required parameter 'componentUuid' is set
      if (componentUuid === undefined || componentUuid === null) {
        throw new Error("Missing the required parameter 'componentUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidPut");
      }
      // verify the required parameter 'dayComponentsMapper' is set
      if (dayComponentsMapper === undefined || dayComponentsMapper === null) {
        throw new Error("Missing the required parameter 'dayComponentsMapper' when calling dayComponentsMapperDayBlueprintUuidComponentUuidPut");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'component_uuid': componentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayComponentsMapper;
      return this.apiClient.callApi(
        '/day-components-mapper/{day_blueprint_uuid}/{component_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayComponentsMapperGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~dayComponentsMapperGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:api-course-service/models/DayComponentsMapper>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all day-component mappings
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:api-course-service/controllers/DefaultApi~dayComponentsMapperGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:api-course-service/models/DayComponentsMapper>}
     */
    dayComponentsMapperGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling dayComponentsMapperGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling dayComponentsMapperGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DayComponentsMapper];
      return this.apiClient.callApi(
        '/day-components-mapper', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayComponentsMapperPost operation.
     * @callback module:api-course-service/controllers/DefaultApi~dayComponentsMapperPostCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/DayComponentsMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new day-component mapping (admin only)
     * @param {module:api-course-service/models/DayComponentsMapper} dayComponentsMapper 
     * @param {module:api-course-service/controllers/DefaultApi~dayComponentsMapperPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/DayComponentsMapper}
     */
    dayComponentsMapperPost(dayComponentsMapper, callback) {
      let postBody = dayComponentsMapper;
      // verify the required parameter 'dayComponentsMapper' is set
      if (dayComponentsMapper === undefined || dayComponentsMapper === null) {
        throw new Error("Missing the required parameter 'dayComponentsMapper' when calling dayComponentsMapperPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayComponentsMapper;
      return this.apiClient.callApi(
        '/day-components-mapper', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayInstancesDayBlueprintUuidUserUuidDelete operation.
     * @callback module:api-course-service/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a day instance
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dayInstancesDayBlueprintUuidUserUuidDelete(dayBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayInstancesDayBlueprintUuidUserUuidDelete");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling dayInstancesDayBlueprintUuidUserUuidDelete");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/day-instances/{day_blueprint_uuid}/{user_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayInstancesDayBlueprintUuidUserUuidGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/DayDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific day instance
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/DayDTO}
     */
    dayInstancesDayBlueprintUuidUserUuidGet(dayBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayInstancesDayBlueprintUuidUserUuidGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling dayInstancesDayBlueprintUuidUserUuidGet");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DayDTO;
      return this.apiClient.callApi(
        '/day-instances/{day_blueprint_uuid}/{user_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayInstancesDayBlueprintUuidUserUuidPut operation.
     * @callback module:api-course-service/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/DayDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a day instance
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/models/DayInstance} dayInstance 
     * @param {module:api-course-service/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/DayDTO}
     */
    dayInstancesDayBlueprintUuidUserUuidPut(dayBlueprintUuid, userUuid, dayInstance, callback) {
      let postBody = dayInstance;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayInstancesDayBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling dayInstancesDayBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'dayInstance' is set
      if (dayInstance === undefined || dayInstance === null) {
        throw new Error("Missing the required parameter 'dayInstance' when calling dayInstancesDayBlueprintUuidUserUuidPut");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayDTO;
      return this.apiClient.callApi(
        '/day-instances/{day_blueprint_uuid}/{user_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayInstancesGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~dayInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:api-course-service/models/DayDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all day instances
     * @param {String} userUuid The UUID of the user
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:api-course-service/controllers/DefaultApi~dayInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:api-course-service/models/DayDTO>}
     */
    dayInstancesGet(userUuid, limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling dayInstancesGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling dayInstancesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling dayInstancesGet");
      }

      let pathParams = {
        'user_uuid': userUuid
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DayDTO];
      return this.apiClient.callApi(
        '/day-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayInstancesPost operation.
     * @callback module:api-course-service/controllers/DefaultApi~dayInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/DayDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a day instance
     * @param {module:api-course-service/models/DayInstance} dayInstance 
     * @param {module:api-course-service/controllers/DefaultApi~dayInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/DayDTO}
     */
    dayInstancesPost(dayInstance, callback) {
      let postBody = dayInstance;
      // verify the required parameter 'dayInstance' is set
      if (dayInstance === undefined || dayInstance === null) {
        throw new Error("Missing the required parameter 'dayInstance' when calling dayInstancesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayDTO;
      return this.apiClient.callApi(
        '/day-instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the daysDayBlueprintUuidDelete operation.
     * @callback module:api-course-service/controllers/DefaultApi~daysDayBlueprintUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete day template (admin only)
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:api-course-service/controllers/DefaultApi~daysDayBlueprintUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    daysDayBlueprintUuidDelete(dayBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling daysDayBlueprintUuidDelete");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/days/{day_blueprint_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the daysDayBlueprintUuidGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~daysDayBlueprintUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/DayBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get day template details
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:api-course-service/controllers/DefaultApi~daysDayBlueprintUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/DayBlueprint}
     */
    daysDayBlueprintUuidGet(dayBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling daysDayBlueprintUuidGet");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DayBlueprint;
      return this.apiClient.callApi(
        '/days/{day_blueprint_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the daysDayBlueprintUuidPut operation.
     * @callback module:api-course-service/controllers/DefaultApi~daysDayBlueprintUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/DayBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update day template (admin only)
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:api-course-service/models/DayBlueprint} dayBlueprint 
     * @param {module:api-course-service/controllers/DefaultApi~daysDayBlueprintUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/DayBlueprint}
     */
    daysDayBlueprintUuidPut(dayBlueprintUuid, dayBlueprint, callback) {
      let postBody = dayBlueprint;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling daysDayBlueprintUuidPut");
      }
      // verify the required parameter 'dayBlueprint' is set
      if (dayBlueprint === undefined || dayBlueprint === null) {
        throw new Error("Missing the required parameter 'dayBlueprint' when calling daysDayBlueprintUuidPut");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayBlueprint;
      return this.apiClient.callApi(
        '/days/{day_blueprint_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the daysGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~daysGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:api-course-service/models/DayBlueprint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List day templates
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:api-course-service/controllers/DefaultApi~daysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:api-course-service/models/DayBlueprint>}
     */
    daysGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling daysGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling daysGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DayBlueprint];
      return this.apiClient.callApi(
        '/days', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the daysPost operation.
     * @callback module:api-course-service/controllers/DefaultApi~daysPostCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/DayBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create day template (admin only)
     * @param {module:api-course-service/models/DayBlueprint} dayBlueprint 
     * @param {module:api-course-service/controllers/DefaultApi~daysPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/DayBlueprint}
     */
    daysPost(dayBlueprint, callback) {
      let postBody = dayBlueprint;
      // verify the required parameter 'dayBlueprint' is set
      if (dayBlueprint === undefined || dayBlueprint === null) {
        throw new Error("Missing the required parameter 'dayBlueprint' when calling daysPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayBlueprint;
      return this.apiClient.callApi(
        '/days', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~financesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:api-course-service/models/Finances>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all finances records
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:api-course-service/controllers/DefaultApi~financesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:api-course-service/models/Finances>}
     */
    financesGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling financesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling financesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Finances];
      return this.apiClient.callApi(
        '/finances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesPost operation.
     * @callback module:api-course-service/controllers/DefaultApi~financesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/Finances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new finances record
     * @param {module:api-course-service/models/Finances} finances 
     * @param {module:api-course-service/controllers/DefaultApi~financesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/Finances}
     */
    financesPost(finances, callback) {
      let postBody = finances;
      // verify the required parameter 'finances' is set
      if (finances === undefined || finances === null) {
        throw new Error("Missing the required parameter 'finances' when calling financesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Finances;
      return this.apiClient.callApi(
        '/finances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesProjectBlueprintUuidUserUuidCalculatePut operation.
     * @callback module:api-course-service/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidCalculatePutCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/Finances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate or recalculate finances
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/models/Finances} finances 
     * @param {module:api-course-service/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidCalculatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/Finances}
     */
    financesProjectBlueprintUuidUserUuidCalculatePut(projectBlueprintUuid, userUuid, finances, callback) {
      let postBody = finances;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling financesProjectBlueprintUuidUserUuidCalculatePut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling financesProjectBlueprintUuidUserUuidCalculatePut");
      }
      // verify the required parameter 'finances' is set
      if (finances === undefined || finances === null) {
        throw new Error("Missing the required parameter 'finances' when calling financesProjectBlueprintUuidUserUuidCalculatePut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Finances;
      return this.apiClient.callApi(
        '/finances/{project_blueprint_uuid}/{user_uuid}/calculate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesProjectBlueprintUuidUserUuidDelete operation.
     * @callback module:api-course-service/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete finances record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    financesProjectBlueprintUuidUserUuidDelete(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling financesProjectBlueprintUuidUserUuidDelete");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling financesProjectBlueprintUuidUserUuidDelete");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/finances/{project_blueprint_uuid}/{user_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesProjectBlueprintUuidUserUuidGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/Finances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get finances record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/Finances}
     */
    financesProjectBlueprintUuidUserUuidGet(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling financesProjectBlueprintUuidUserUuidGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling financesProjectBlueprintUuidUserUuidGet");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Finances;
      return this.apiClient.callApi(
        '/finances/{project_blueprint_uuid}/{user_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesProjectBlueprintUuidUserUuidPut operation.
     * @callback module:api-course-service/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/Finances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update finances record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/models/Finances} finances 
     * @param {module:api-course-service/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/Finances}
     */
    financesProjectBlueprintUuidUserUuidPut(projectBlueprintUuid, userUuid, finances, callback) {
      let postBody = finances;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling financesProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling financesProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'finances' is set
      if (finances === undefined || finances === null) {
        throw new Error("Missing the required parameter 'finances' when calling financesProjectBlueprintUuidUserUuidPut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Finances;
      return this.apiClient.callApi(
        '/finances/{project_blueprint_uuid}/{user_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~membersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:api-course-service/models/Members>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all members records
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:api-course-service/controllers/DefaultApi~membersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:api-course-service/models/Members>}
     */
    membersGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling membersGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling membersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Members];
      return this.apiClient.callApi(
        '/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersPost operation.
     * @callback module:api-course-service/controllers/DefaultApi~membersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/Members} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new members record
     * @param {module:api-course-service/models/Members} members 
     * @param {module:api-course-service/controllers/DefaultApi~membersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/Members}
     */
    membersPost(members, callback) {
      let postBody = members;
      // verify the required parameter 'members' is set
      if (members === undefined || members === null) {
        throw new Error("Missing the required parameter 'members' when calling membersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Members;
      return this.apiClient.callApi(
        '/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersProjectBlueprintUuidUserUuidDelete operation.
     * @callback module:api-course-service/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a member record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    membersProjectBlueprintUuidUserUuidDelete(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling membersProjectBlueprintUuidUserUuidDelete");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling membersProjectBlueprintUuidUserUuidDelete");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{project_blueprint_uuid}/{user_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersProjectBlueprintUuidUserUuidGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/Members} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one member record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/Members}
     */
    membersProjectBlueprintUuidUserUuidGet(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling membersProjectBlueprintUuidUserUuidGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling membersProjectBlueprintUuidUserUuidGet");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Members;
      return this.apiClient.callApi(
        '/members/{project_blueprint_uuid}/{user_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersProjectBlueprintUuidUserUuidPut operation.
     * @callback module:api-course-service/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/Members} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a member record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/models/Members} members 
     * @param {module:api-course-service/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/Members}
     */
    membersProjectBlueprintUuidUserUuidPut(projectBlueprintUuid, userUuid, members, callback) {
      let postBody = members;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling membersProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling membersProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'members' is set
      if (members === undefined || members === null) {
        throw new Error("Missing the required parameter 'members' when calling membersProjectBlueprintUuidUserUuidPut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Members;
      return this.apiClient.callApi(
        '/members/{project_blueprint_uuid}/{user_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDaysMapperGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectDaysMapperGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:api-course-service/models/ProjectDaysMapper>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all project-day mappings
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:api-course-service/controllers/DefaultApi~projectDaysMapperGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:api-course-service/models/ProjectDaysMapper>}
     */
    projectDaysMapperGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling projectDaysMapperGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling projectDaysMapperGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectDaysMapper];
      return this.apiClient.callApi(
        '/project-days-mapper', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDaysMapperPost operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectDaysMapperPostCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/ProjectDaysMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project-day mapping (admin only)
     * @param {module:api-course-service/models/ProjectDaysMapper} projectDaysMapper 
     * @param {module:api-course-service/controllers/DefaultApi~projectDaysMapperPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/ProjectDaysMapper}
     */
    projectDaysMapperPost(projectDaysMapper, callback) {
      let postBody = projectDaysMapper;
      // verify the required parameter 'projectDaysMapper' is set
      if (projectDaysMapper === undefined || projectDaysMapper === null) {
        throw new Error("Missing the required parameter 'projectDaysMapper' when calling projectDaysMapperPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectDaysMapper;
      return this.apiClient.callApi(
        '/project-days-mapper', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDelete operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project-day mapping (admin only)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:api-course-service/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDelete(projectBlueprintUuid, dayBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDelete");
      }
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDelete");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project-days-mapper/{project_blueprint_uuid}/{day_blueprint_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/ProjectDaysMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project-day mapping
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:api-course-service/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/ProjectDaysMapper}
     */
    projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGet(projectBlueprintUuid, dayBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGet");
      }
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGet");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectDaysMapper;
      return this.apiClient.callApi(
        '/project-days-mapper/{project_blueprint_uuid}/{day_blueprint_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/ProjectDaysMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific project-day mapping (admin only)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:api-course-service/models/ProjectDaysMapper} projectDaysMapper 
     * @param {module:api-course-service/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/ProjectDaysMapper}
     */
    projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut(projectBlueprintUuid, dayBlueprintUuid, projectDaysMapper, callback) {
      let postBody = projectDaysMapper;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut");
      }
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut");
      }
      // verify the required parameter 'projectDaysMapper' is set
      if (projectDaysMapper === undefined || projectDaysMapper === null) {
        throw new Error("Missing the required parameter 'projectDaysMapper' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectDaysMapper;
      return this.apiClient.callApi(
        '/project-days-mapper/{project_blueprint_uuid}/{day_blueprint_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInstancesGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:api-course-service/models/ProjectDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all project instances
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/controllers/DefaultApi~projectInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:api-course-service/models/ProjectDTO>}
     */
    projectInstancesGet(limit, offset, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling projectInstancesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling projectInstancesGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling projectInstancesGet");
      }

      let pathParams = {
        'user_uuid': userUuid
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectDTO];
      return this.apiClient.callApi(
        '/project-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInstancesPost operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/ProjectDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project instance (user)
     * @param {module:api-course-service/models/ProjectInstance} projectInstance 
     * @param {module:api-course-service/controllers/DefaultApi~projectInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/ProjectDTO}
     */
    projectInstancesPost(projectInstance, callback) {
      let postBody = projectInstance;
      // verify the required parameter 'projectInstance' is set
      if (projectInstance === undefined || projectInstance === null) {
        throw new Error("Missing the required parameter 'projectInstance' when calling projectInstancesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectDTO;
      return this.apiClient.callApi(
        '/project-instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInstancesProjectBlueprintUuidUserUuidDelete operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project instance (admin or user)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectInstancesProjectBlueprintUuidUserUuidDelete(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectInstancesProjectBlueprintUuidUserUuidDelete");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling projectInstancesProjectBlueprintUuidUserUuidDelete");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project-instances/{project_blueprint_uuid}/{user_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInstancesProjectBlueprintUuidUserUuidGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/ProjectDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project instance
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/ProjectDTO}
     */
    projectInstancesProjectBlueprintUuidUserUuidGet(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectInstancesProjectBlueprintUuidUserUuidGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling projectInstancesProjectBlueprintUuidUserUuidGet");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectDTO;
      return this.apiClient.callApi(
        '/project-instances/{project_blueprint_uuid}/{user_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInstancesProjectBlueprintUuidUserUuidPut operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/ProjectDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project instance (user)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:api-course-service/models/ProjectInstance} projectInstance 
     * @param {module:api-course-service/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/ProjectDTO}
     */
    projectInstancesProjectBlueprintUuidUserUuidPut(projectBlueprintUuid, userUuid, projectInstance, callback) {
      let postBody = projectInstance;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectInstancesProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling projectInstancesProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'projectInstance' is set
      if (projectInstance === undefined || projectInstance === null) {
        throw new Error("Missing the required parameter 'projectInstance' when calling projectInstancesProjectBlueprintUuidUserUuidPut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectDTO;
      return this.apiClient.callApi(
        '/project-instances/{project_blueprint_uuid}/{user_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:api-course-service/models/ProjectBlueprint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project blueprints
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:api-course-service/controllers/DefaultApi~projectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:api-course-service/models/ProjectBlueprint>}
     */
    projectsGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling projectsGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling projectsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectBlueprint];
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsPost operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/ProjectBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new project blueprint (admin only)
     * @param {module:api-course-service/models/ProjectBlueprint} projectBlueprint 
     * @param {module:api-course-service/controllers/DefaultApi~projectsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/ProjectBlueprint}
     */
    projectsPost(projectBlueprint, callback) {
      let postBody = projectBlueprint;
      // verify the required parameter 'projectBlueprint' is set
      if (projectBlueprint === undefined || projectBlueprint === null) {
        throw new Error("Missing the required parameter 'projectBlueprint' when calling projectsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectBlueprint;
      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectBlueprintUuidDelete operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectsProjectBlueprintUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project blueprint (admin only)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {module:api-course-service/controllers/DefaultApi~projectsProjectBlueprintUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsProjectBlueprintUuidDelete(projectBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectsProjectBlueprintUuidDelete");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{project_blueprint_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectBlueprintUuidGet operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectsProjectBlueprintUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/ProjectBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project blueprint details
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {module:api-course-service/controllers/DefaultApi~projectsProjectBlueprintUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/ProjectBlueprint}
     */
    projectsProjectBlueprintUuidGet(projectBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectsProjectBlueprintUuidGet");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectBlueprint;
      return this.apiClient.callApi(
        '/projects/{project_blueprint_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectBlueprintUuidPut operation.
     * @callback module:api-course-service/controllers/DefaultApi~projectsProjectBlueprintUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:api-course-service/models/ProjectBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing project blueprint (admin only)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {module:api-course-service/models/ProjectBlueprint} projectBlueprint 
     * @param {module:api-course-service/controllers/DefaultApi~projectsProjectBlueprintUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:api-course-service/models/ProjectBlueprint}
     */
    projectsProjectBlueprintUuidPut(projectBlueprintUuid, projectBlueprint, callback) {
      let postBody = projectBlueprint;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectsProjectBlueprintUuidPut");
      }
      // verify the required parameter 'projectBlueprint' is set
      if (projectBlueprint === undefined || projectBlueprint === null) {
        throw new Error("Missing the required parameter 'projectBlueprint' when calling projectsProjectBlueprintUuidPut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectBlueprint;
      return this.apiClient.callApi(
        '/projects/{project_blueprint_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
