// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Suggests related learning materials based on the courses a user is viewing.
 *
 * - suggestRelatedContent - A function that suggests related learning materials.
 * - SuggestRelatedContentInput - The input type for the suggestRelatedContent function.
 * - SuggestRelatedContentOutput - The return type for the suggestRelatedContent function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const SuggestRelatedContentInputSchema = z.object({
  courseTitles: z.array(z.string()).describe('The titles of the courses the user is viewing.'),
});
export type SuggestRelatedContentInput = z.infer<typeof SuggestRelatedContentInputSchema>;

const SuggestRelatedContentOutputSchema = z.object({
  relatedMaterials: z.array(z.string()).describe('A list of related learning materials.'),
});
export type SuggestRelatedContentOutput = z.infer<typeof SuggestRelatedContentOutputSchema>;

export async function suggestRelatedContent(input: SuggestRelatedContentInput): Promise<SuggestRelatedContentOutput> {
  return suggestRelatedContentFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestRelatedContentPrompt',
  input: {
    schema: z.object({
      courseTitles: z.array(z.string()).describe('The titles of the courses the user is viewing.'),
    }),
  },
  output: {
    schema: z.object({
      relatedMaterials: z.array(z.string()).describe('A list of related learning materials.'),
    }),
  },
  prompt: `You are an AI assistant designed to suggest related learning materials to users based on the courses they are viewing.

  The user is currently viewing the following courses:
  {{#each courseTitles}}- {{{this}}}{{/each}}

  Suggest a list of related learning materials that would be helpful for the user to expand their knowledge. Return only the names of learning material, do not add any other additional text.`,
});

const suggestRelatedContentFlow = ai.defineFlow<
  typeof SuggestRelatedContentInputSchema,
  typeof SuggestRelatedContentOutputSchema
>({
  name: 'suggestRelatedContentFlow',
  inputSchema: SuggestRelatedContentInputSchema,
  outputSchema: SuggestRelatedContentOutputSchema,
}, async input => {
  const {output} = await prompt(input);
  return output!;
});
