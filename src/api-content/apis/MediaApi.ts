/* tslint:disable */
/* eslint-disable */
/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Media,
} from '../models/index';
import {
    MediaFromJSON,
    MediaToJSON,
} from '../models/index';

export interface MediaGetRequest {
    limit: number;
    offset: number;
}

export interface MediaMediaUuidDeleteRequest {
    mediaUuid: string;
}

export interface MediaMediaUuidGetRequest {
    mediaUuid: string;
}

export interface MediaMediaUuidPutRequest {
    mediaUuid: string;
    media: Media;
}

export interface MediaPostMultipartRequest {
    file: Blob;
    description?: string;
    type?: string;
    title?: string;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     * (Optional) List media items
     */
    async mediaGetRaw(requestParameters: MediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Media>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling mediaGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling mediaGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/media`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MediaFromJSON));
    }

    /**
     * (Optional) List media items
     */
    async mediaGet(requestParameters: MediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Media>> {
        const response = await this.mediaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete media (admin only)
     */
    async mediaMediaUuidDeleteRaw(requestParameters: MediaMediaUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mediaUuid'] == null) {
            throw new runtime.RequiredError(
                'mediaUuid',
                'Required parameter "mediaUuid" was null or undefined when calling mediaMediaUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/media/{media_uuid}`.replace(`{${"media_uuid"}}`, encodeURIComponent(String(requestParameters['mediaUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete media (admin only)
     */
    async mediaMediaUuidDelete(requestParameters: MediaMediaUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mediaMediaUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get media metadata
     */
    async mediaMediaUuidGetRaw(requestParameters: MediaMediaUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Media>> {
        if (requestParameters['mediaUuid'] == null) {
            throw new runtime.RequiredError(
                'mediaUuid',
                'Required parameter "mediaUuid" was null or undefined when calling mediaMediaUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/media/{media_uuid}`.replace(`{${"media_uuid"}}`, encodeURIComponent(String(requestParameters['mediaUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFromJSON(jsonValue));
    }

    /**
     * Get media metadata
     */
    async mediaMediaUuidGet(requestParameters: MediaMediaUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Media> {
        const response = await this.mediaMediaUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update media metadata (admin only)
     */
    async mediaMediaUuidPutRaw(requestParameters: MediaMediaUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Media>> {
        if (requestParameters['mediaUuid'] == null) {
            throw new runtime.RequiredError(
                'mediaUuid',
                'Required parameter "mediaUuid" was null or undefined when calling mediaMediaUuidPut().'
            );
        }

        if (requestParameters['media'] == null) {
            throw new runtime.RequiredError(
                'media',
                'Required parameter "media" was null or undefined when calling mediaMediaUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/media/{media_uuid}`.replace(`{${"media_uuid"}}`, encodeURIComponent(String(requestParameters['mediaUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MediaToJSON(requestParameters['media']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFromJSON(jsonValue));
    }

    /**
     * Update media metadata (admin only)
     */
    async mediaMediaUuidPut(requestParameters: MediaMediaUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Media> {
        const response = await this.mediaMediaUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload new media (admin only)
     */
    async mediaPostMultipartRaw(requestParameters: MediaPostMultipartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Media>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling mediaPostMultipart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        if (requestParameters['type'] != null) {
            formParams.append('type', requestParameters['type'] as any);
        }

        if (requestParameters['title'] != null) {
            formParams.append('title', requestParameters['title'] as any);
        }

        const response = await this.request({
            path: `/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFromJSON(jsonValue));
    }

    /**
     * Upload new media (admin only)
     */
    async mediaPostMultipart(requestParameters: MediaPostMultipartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Media> {
        const response = await this.mediaPostMultipartRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
