/* tslint:disable */
/* eslint-disable */
/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TaskBlueprint,
  TaskDTO,
  TaskInstance,
} from '../models/index';
import {
    TaskBlueprintFromJSON,
    TaskBlueprintToJSON,
    TaskDTOFromJSON,
    TaskDTOToJSON,
    TaskInstanceFromJSON,
    TaskInstanceToJSON,
} from '../models/index';

export interface TaskInstancesGetRequest {
    userUuid: string;
    limit: number;
    offset: number;
}

export interface TaskInstancesPostRequest {
    taskInstance: TaskInstance;
}

export interface TaskInstancesTaskBlueprintUuidUserUuidDeleteRequest {
    taskBlueprintUuid: string;
    userUuid: string;
}

export interface TaskInstancesTaskBlueprintUuidUserUuidGetRequest {
    taskBlueprintUuid: string;
    userUuid: string;
}

export interface TaskInstancesTaskBlueprintUuidUserUuidPutRequest {
    taskBlueprintUuid: string;
    userUuid: string;
    taskInstance: TaskInstance;
}

export interface TasksGetRequest {
    limit: number;
    offset: number;
}

export interface TasksPostRequest {
    taskBlueprint: TaskBlueprint;
}

export interface TasksTaskBlueprintUuidDeleteRequest {
    taskBlueprintUuid: string;
}

export interface TasksTaskBlueprintUuidGetRequest {
    taskBlueprintUuid: string;
}

export interface TasksTaskBlueprintUuidPutRequest {
    taskBlueprintUuid: string;
    taskBlueprint: TaskBlueprint;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * List all task instances
     */
    async taskInstancesGetRaw(requestParameters: TaskInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskDTO>>> {
        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling taskInstancesGet().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling taskInstancesGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling taskInstancesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task-instances`.replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskDTOFromJSON));
    }

    /**
     * List all task instances
     */
    async taskInstancesGet(requestParameters: TaskInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskDTO>> {
        const response = await this.taskInstancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new task instance
     */
    async taskInstancesPostRaw(requestParameters: TaskInstancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskDTO>> {
        if (requestParameters['taskInstance'] == null) {
            throw new runtime.RequiredError(
                'taskInstance',
                'Required parameter "taskInstance" was null or undefined when calling taskInstancesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task-instances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskInstanceToJSON(requestParameters['taskInstance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDTOFromJSON(jsonValue));
    }

    /**
     * Create a new task instance
     */
    async taskInstancesPost(requestParameters: TaskInstancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskDTO> {
        const response = await this.taskInstancesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a task instance
     */
    async taskInstancesTaskBlueprintUuidUserUuidDeleteRaw(requestParameters: TaskInstancesTaskBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'taskBlueprintUuid',
                'Required parameter "taskBlueprintUuid" was null or undefined when calling taskInstancesTaskBlueprintUuidUserUuidDelete().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling taskInstancesTaskBlueprintUuidUserUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task-instances/{task_blueprint_uuid}/{user_uuid}`.replace(`{${"task_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['taskBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a task instance
     */
    async taskInstancesTaskBlueprintUuidUserUuidDelete(requestParameters: TaskInstancesTaskBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.taskInstancesTaskBlueprintUuidUserUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a user\'s specific task instance
     */
    async taskInstancesTaskBlueprintUuidUserUuidGetRaw(requestParameters: TaskInstancesTaskBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskDTO>> {
        if (requestParameters['taskBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'taskBlueprintUuid',
                'Required parameter "taskBlueprintUuid" was null or undefined when calling taskInstancesTaskBlueprintUuidUserUuidGet().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling taskInstancesTaskBlueprintUuidUserUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task-instances/{task_blueprint_uuid}/{user_uuid}`.replace(`{${"task_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['taskBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDTOFromJSON(jsonValue));
    }

    /**
     * Get a user\'s specific task instance
     */
    async taskInstancesTaskBlueprintUuidUserUuidGet(requestParameters: TaskInstancesTaskBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskDTO> {
        const response = await this.taskInstancesTaskBlueprintUuidUserUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a task instance
     */
    async taskInstancesTaskBlueprintUuidUserUuidPutRaw(requestParameters: TaskInstancesTaskBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskDTO>> {
        if (requestParameters['taskBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'taskBlueprintUuid',
                'Required parameter "taskBlueprintUuid" was null or undefined when calling taskInstancesTaskBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling taskInstancesTaskBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['taskInstance'] == null) {
            throw new runtime.RequiredError(
                'taskInstance',
                'Required parameter "taskInstance" was null or undefined when calling taskInstancesTaskBlueprintUuidUserUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task-instances/{task_blueprint_uuid}/{user_uuid}`.replace(`{${"task_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['taskBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskInstanceToJSON(requestParameters['taskInstance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDTOFromJSON(jsonValue));
    }

    /**
     * Update a task instance
     */
    async taskInstancesTaskBlueprintUuidUserUuidPut(requestParameters: TaskInstancesTaskBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskDTO> {
        const response = await this.taskInstancesTaskBlueprintUuidUserUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List task templates
     */
    async tasksGetRaw(requestParameters: TasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskBlueprint>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling tasksGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling tasksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskBlueprintFromJSON));
    }

    /**
     * List task templates
     */
    async tasksGet(requestParameters: TasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskBlueprint>> {
        const response = await this.tasksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create task template (admin only)
     */
    async tasksPostRaw(requestParameters: TasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskBlueprint>> {
        if (requestParameters['taskBlueprint'] == null) {
            throw new runtime.RequiredError(
                'taskBlueprint',
                'Required parameter "taskBlueprint" was null or undefined when calling tasksPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskBlueprintToJSON(requestParameters['taskBlueprint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskBlueprintFromJSON(jsonValue));
    }

    /**
     * Create task template (admin only)
     */
    async tasksPost(requestParameters: TasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskBlueprint> {
        const response = await this.tasksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete task template (admin only)
     */
    async tasksTaskBlueprintUuidDeleteRaw(requestParameters: TasksTaskBlueprintUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'taskBlueprintUuid',
                'Required parameter "taskBlueprintUuid" was null or undefined when calling tasksTaskBlueprintUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks/{task_blueprint_uuid}`.replace(`{${"task_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['taskBlueprintUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete task template (admin only)
     */
    async tasksTaskBlueprintUuidDelete(requestParameters: TasksTaskBlueprintUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tasksTaskBlueprintUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get task template
     */
    async tasksTaskBlueprintUuidGetRaw(requestParameters: TasksTaskBlueprintUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskBlueprint>> {
        if (requestParameters['taskBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'taskBlueprintUuid',
                'Required parameter "taskBlueprintUuid" was null or undefined when calling tasksTaskBlueprintUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{task_blueprint_uuid}`.replace(`{${"task_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['taskBlueprintUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskBlueprintFromJSON(jsonValue));
    }

    /**
     * Get task template
     */
    async tasksTaskBlueprintUuidGet(requestParameters: TasksTaskBlueprintUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskBlueprint> {
        const response = await this.tasksTaskBlueprintUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update task template (admin only)
     */
    async tasksTaskBlueprintUuidPutRaw(requestParameters: TasksTaskBlueprintUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskBlueprint>> {
        if (requestParameters['taskBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'taskBlueprintUuid',
                'Required parameter "taskBlueprintUuid" was null or undefined when calling tasksTaskBlueprintUuidPut().'
            );
        }

        if (requestParameters['taskBlueprint'] == null) {
            throw new runtime.RequiredError(
                'taskBlueprint',
                'Required parameter "taskBlueprint" was null or undefined when calling tasksTaskBlueprintUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks/{task_blueprint_uuid}`.replace(`{${"task_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['taskBlueprintUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskBlueprintToJSON(requestParameters['taskBlueprint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskBlueprintFromJSON(jsonValue));
    }

    /**
     * Update task template (admin only)
     */
    async tasksTaskBlueprintUuidPut(requestParameters: TasksTaskBlueprintUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskBlueprint> {
        const response = await this.tasksTaskBlueprintUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
