/* tslint:disable */
/* eslint-disable */
/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Field
 */
export interface Field {
    /**
     * UUID for a Form Field
     * @type {string}
     * @memberof Field
     */
    fieldUuid: string;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    inputType: FieldInputTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    description?: string;
}


/**
 * @export
 */
export const FieldInputTypeEnum = {
    Text: 'TEXT',
    Number: 'NUMBER',
    File: 'FILE'
} as const;
export type FieldInputTypeEnum = typeof FieldInputTypeEnum[keyof typeof FieldInputTypeEnum];


/**
 * Check if a given object implements the Field interface.
 */
export function instanceOfField(value: object): value is Field {
    if (!('fieldUuid' in value) || value['fieldUuid'] === undefined) return false;
    if (!('inputType' in value) || value['inputType'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function FieldFromJSON(json: any): Field {
    return FieldFromJSONTyped(json, false);
}

export function FieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): Field {
    if (json == null) {
        return json;
    }
    return {
        
        'fieldUuid': json['field_uuid'],
        'inputType': json['input_type'],
        'required': json['required'] == null ? undefined : json['required'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
    };
}

export function FieldToJSON(json: any): Field {
    return FieldToJSONTyped(json, false);
}

export function FieldToJSONTyped(value?: Field | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'field_uuid': value['fieldUuid'],
        'input_type': value['inputType'],
        'required': value['required'],
        'title': value['title'],
        'description': value['description'],
    };
}

