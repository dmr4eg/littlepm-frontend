/* tslint:disable */
/* eslint-disable */
/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * UUID for a Media resource
     * @type {string}
     * @memberof Media
     */
    mediaUUID: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    type: MediaTypeEnum;
    /**
     * URL for the media file
     * @type {string}
     * @memberof Media
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    description?: string;
}


/**
 * @export
 */
export const MediaTypeEnum = {
    Video: 'video',
    Image: 'image'
} as const;
export type MediaTypeEnum = typeof MediaTypeEnum[keyof typeof MediaTypeEnum];


/**
 * Check if a given object implements the Media interface.
 */
export function instanceOfMedia(value: object): value is Media {
    if (!('mediaUUID' in value) || value['mediaUUID'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function MediaFromJSON(json: any): Media {
    return MediaFromJSONTyped(json, false);
}

export function MediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Media {
    if (json == null) {
        return json;
    }
    return {
        
        'mediaUUID': json['mediaUUID'],
        'type': json['type'],
        'url': json['url'] == null ? undefined : json['url'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
    };
}

export function MediaToJSON(json: any): Media {
    return MediaToJSONTyped(json, false);
}

export function MediaToJSONTyped(value?: Media | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'mediaUUID': value['mediaUUID'],
        'type': value['type'],
        'url': value['url'],
        'title': value['title'],
        'description': value['description'],
    };
}

