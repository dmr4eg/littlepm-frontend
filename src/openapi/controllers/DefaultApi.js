/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DayBlueprint from '../models/DayBlueprint';
import DayComponentsMapper from '../models/DayComponentsMapper';
import DayDTO from '../models/DayDTO';
import DayInstance from '../models/DayInstance';
import Finances from '../models/Finances';
import FormBlueprint from '../models/FormBlueprint';
import FormDTO from '../models/FormDTO';
import FormFieldMapper from '../models/FormFieldMapper';
import FormInstance from '../models/FormInstance';
import Media from '../models/Media';
import Members from '../models/Members';
import ProjectBlueprint from '../models/ProjectBlueprint';
import ProjectDTO from '../models/ProjectDTO';
import ProjectDaysMapper from '../models/ProjectDaysMapper';
import ProjectInstance from '../models/ProjectInstance';
import TaskBlueprint from '../models/TaskBlueprint';
import TaskDTO from '../models/TaskDTO';
import TaskInstance from '../models/TaskInstance';

/**
* Default service.
* @module openapi/controllers/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:openapi/controllers/DefaultApi
    * @class
    * @param {module:openapi/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:openapi/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dayComponentsMapperDayBlueprintUuidComponentUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete day-component mapping (admin only)
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} componentUuid Component UUID in the path
     * @param {module:openapi/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dayComponentsMapperDayBlueprintUuidComponentUuidDelete(dayBlueprintUuid, componentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidDelete");
      }
      // verify the required parameter 'componentUuid' is set
      if (componentUuid === undefined || componentUuid === null) {
        throw new Error("Missing the required parameter 'componentUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidDelete");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'component_uuid': componentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/day-components-mapper/{day_blueprint_uuid}/{component_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayComponentsMapperDayBlueprintUuidComponentUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/DayComponentsMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific day-component mapping
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} componentUuid Component UUID in the path
     * @param {module:openapi/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/DayComponentsMapper}
     */
    dayComponentsMapperDayBlueprintUuidComponentUuidGet(dayBlueprintUuid, componentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidGet");
      }
      // verify the required parameter 'componentUuid' is set
      if (componentUuid === undefined || componentUuid === null) {
        throw new Error("Missing the required parameter 'componentUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidGet");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'component_uuid': componentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DayComponentsMapper;
      return this.apiClient.callApi(
        '/day-components-mapper/{day_blueprint_uuid}/{component_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayComponentsMapperDayBlueprintUuidComponentUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/DayComponentsMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a day-component mapping (admin only)
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} componentUuid Component UUID in the path
     * @param {module:openapi/models/DayComponentsMapper} dayComponentsMapper 
     * @param {module:openapi/controllers/DefaultApi~dayComponentsMapperDayBlueprintUuidComponentUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/DayComponentsMapper}
     */
    dayComponentsMapperDayBlueprintUuidComponentUuidPut(dayBlueprintUuid, componentUuid, dayComponentsMapper, callback) {
      let postBody = dayComponentsMapper;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidPut");
      }
      // verify the required parameter 'componentUuid' is set
      if (componentUuid === undefined || componentUuid === null) {
        throw new Error("Missing the required parameter 'componentUuid' when calling dayComponentsMapperDayBlueprintUuidComponentUuidPut");
      }
      // verify the required parameter 'dayComponentsMapper' is set
      if (dayComponentsMapper === undefined || dayComponentsMapper === null) {
        throw new Error("Missing the required parameter 'dayComponentsMapper' when calling dayComponentsMapperDayBlueprintUuidComponentUuidPut");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'component_uuid': componentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayComponentsMapper;
      return this.apiClient.callApi(
        '/day-components-mapper/{day_blueprint_uuid}/{component_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayComponentsMapperGet operation.
     * @callback module:openapi/controllers/DefaultApi~dayComponentsMapperGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/DayComponentsMapper>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all day-component mappings
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~dayComponentsMapperGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/DayComponentsMapper>}
     */
    dayComponentsMapperGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling dayComponentsMapperGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling dayComponentsMapperGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DayComponentsMapper];
      return this.apiClient.callApi(
        '/day-components-mapper', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayComponentsMapperPost operation.
     * @callback module:openapi/controllers/DefaultApi~dayComponentsMapperPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/DayComponentsMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new day-component mapping (admin only)
     * @param {module:openapi/models/DayComponentsMapper} dayComponentsMapper 
     * @param {module:openapi/controllers/DefaultApi~dayComponentsMapperPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/DayComponentsMapper}
     */
    dayComponentsMapperPost(dayComponentsMapper, callback) {
      let postBody = dayComponentsMapper;
      // verify the required parameter 'dayComponentsMapper' is set
      if (dayComponentsMapper === undefined || dayComponentsMapper === null) {
        throw new Error("Missing the required parameter 'dayComponentsMapper' when calling dayComponentsMapperPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayComponentsMapper;
      return this.apiClient.callApi(
        '/day-components-mapper', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayInstancesDayBlueprintUuidUserUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a day instance
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dayInstancesDayBlueprintUuidUserUuidDelete(dayBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayInstancesDayBlueprintUuidUserUuidDelete");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling dayInstancesDayBlueprintUuidUserUuidDelete");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/day-instances/{day_blueprint_uuid}/{user_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayInstancesDayBlueprintUuidUserUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/DayDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific day instance
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/DayDTO}
     */
    dayInstancesDayBlueprintUuidUserUuidGet(dayBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayInstancesDayBlueprintUuidUserUuidGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling dayInstancesDayBlueprintUuidUserUuidGet");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DayDTO;
      return this.apiClient.callApi(
        '/day-instances/{day_blueprint_uuid}/{user_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayInstancesDayBlueprintUuidUserUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/DayDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a day instance
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/models/DayInstance} dayInstance 
     * @param {module:openapi/controllers/DefaultApi~dayInstancesDayBlueprintUuidUserUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/DayDTO}
     */
    dayInstancesDayBlueprintUuidUserUuidPut(dayBlueprintUuid, userUuid, dayInstance, callback) {
      let postBody = dayInstance;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling dayInstancesDayBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling dayInstancesDayBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'dayInstance' is set
      if (dayInstance === undefined || dayInstance === null) {
        throw new Error("Missing the required parameter 'dayInstance' when calling dayInstancesDayBlueprintUuidUserUuidPut");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayDTO;
      return this.apiClient.callApi(
        '/day-instances/{day_blueprint_uuid}/{user_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayInstancesGet operation.
     * @callback module:openapi/controllers/DefaultApi~dayInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/DayDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all day instances
     * @param {String} userUuid The UUID of the user
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~dayInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/DayDTO>}
     */
    dayInstancesGet(userUuid, limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling dayInstancesGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling dayInstancesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling dayInstancesGet");
      }

      let pathParams = {
        'user_uuid': userUuid
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DayDTO];
      return this.apiClient.callApi(
        '/day-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dayInstancesPost operation.
     * @callback module:openapi/controllers/DefaultApi~dayInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/DayDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a day instance
     * @param {module:openapi/models/DayInstance} dayInstance 
     * @param {module:openapi/controllers/DefaultApi~dayInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/DayDTO}
     */
    dayInstancesPost(dayInstance, callback) {
      let postBody = dayInstance;
      // verify the required parameter 'dayInstance' is set
      if (dayInstance === undefined || dayInstance === null) {
        throw new Error("Missing the required parameter 'dayInstance' when calling dayInstancesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayDTO;
      return this.apiClient.callApi(
        '/day-instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the daysDayBlueprintUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~daysDayBlueprintUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete day template (admin only)
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:openapi/controllers/DefaultApi~daysDayBlueprintUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    daysDayBlueprintUuidDelete(dayBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling daysDayBlueprintUuidDelete");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/days/{day_blueprint_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the daysDayBlueprintUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~daysDayBlueprintUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/DayBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get day template details
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:openapi/controllers/DefaultApi~daysDayBlueprintUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/DayBlueprint}
     */
    daysDayBlueprintUuidGet(dayBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling daysDayBlueprintUuidGet");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DayBlueprint;
      return this.apiClient.callApi(
        '/days/{day_blueprint_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the daysDayBlueprintUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~daysDayBlueprintUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/DayBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update day template (admin only)
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:openapi/models/DayBlueprint} dayBlueprint 
     * @param {module:openapi/controllers/DefaultApi~daysDayBlueprintUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/DayBlueprint}
     */
    daysDayBlueprintUuidPut(dayBlueprintUuid, dayBlueprint, callback) {
      let postBody = dayBlueprint;
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling daysDayBlueprintUuidPut");
      }
      // verify the required parameter 'dayBlueprint' is set
      if (dayBlueprint === undefined || dayBlueprint === null) {
        throw new Error("Missing the required parameter 'dayBlueprint' when calling daysDayBlueprintUuidPut");
      }

      let pathParams = {
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayBlueprint;
      return this.apiClient.callApi(
        '/days/{day_blueprint_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the daysGet operation.
     * @callback module:openapi/controllers/DefaultApi~daysGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/DayBlueprint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List day templates
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~daysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/DayBlueprint>}
     */
    daysGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling daysGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling daysGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DayBlueprint];
      return this.apiClient.callApi(
        '/days', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the daysPost operation.
     * @callback module:openapi/controllers/DefaultApi~daysPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/DayBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create day template (admin only)
     * @param {module:openapi/models/DayBlueprint} dayBlueprint 
     * @param {module:openapi/controllers/DefaultApi~daysPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/DayBlueprint}
     */
    daysPost(dayBlueprint, callback) {
      let postBody = dayBlueprint;
      // verify the required parameter 'dayBlueprint' is set
      if (dayBlueprint === undefined || dayBlueprint === null) {
        throw new Error("Missing the required parameter 'dayBlueprint' when calling daysPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DayBlueprint;
      return this.apiClient.callApi(
        '/days', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesGet operation.
     * @callback module:openapi/controllers/DefaultApi~financesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/Finances>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all finances records
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~financesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/Finances>}
     */
    financesGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling financesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling financesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Finances];
      return this.apiClient.callApi(
        '/finances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesPost operation.
     * @callback module:openapi/controllers/DefaultApi~financesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/Finances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new finances record
     * @param {module:openapi/models/Finances} finances 
     * @param {module:openapi/controllers/DefaultApi~financesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/Finances}
     */
    financesPost(finances, callback) {
      let postBody = finances;
      // verify the required parameter 'finances' is set
      if (finances === undefined || finances === null) {
        throw new Error("Missing the required parameter 'finances' when calling financesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Finances;
      return this.apiClient.callApi(
        '/finances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesProjectBlueprintUuidUserUuidCalculatePut operation.
     * @callback module:openapi/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidCalculatePutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/Finances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate or recalculate finances
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/models/Finances} finances 
     * @param {module:openapi/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidCalculatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/Finances}
     */
    financesProjectBlueprintUuidUserUuidCalculatePut(projectBlueprintUuid, userUuid, finances, callback) {
      let postBody = finances;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling financesProjectBlueprintUuidUserUuidCalculatePut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling financesProjectBlueprintUuidUserUuidCalculatePut");
      }
      // verify the required parameter 'finances' is set
      if (finances === undefined || finances === null) {
        throw new Error("Missing the required parameter 'finances' when calling financesProjectBlueprintUuidUserUuidCalculatePut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Finances;
      return this.apiClient.callApi(
        '/finances/{project_blueprint_uuid}/{user_uuid}/calculate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesProjectBlueprintUuidUserUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete finances record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    financesProjectBlueprintUuidUserUuidDelete(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling financesProjectBlueprintUuidUserUuidDelete");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling financesProjectBlueprintUuidUserUuidDelete");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/finances/{project_blueprint_uuid}/{user_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesProjectBlueprintUuidUserUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/Finances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get finances record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/Finances}
     */
    financesProjectBlueprintUuidUserUuidGet(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling financesProjectBlueprintUuidUserUuidGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling financesProjectBlueprintUuidUserUuidGet");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Finances;
      return this.apiClient.callApi(
        '/finances/{project_blueprint_uuid}/{user_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financesProjectBlueprintUuidUserUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/Finances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update finances record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/models/Finances} finances 
     * @param {module:openapi/controllers/DefaultApi~financesProjectBlueprintUuidUserUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/Finances}
     */
    financesProjectBlueprintUuidUserUuidPut(projectBlueprintUuid, userUuid, finances, callback) {
      let postBody = finances;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling financesProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling financesProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'finances' is set
      if (finances === undefined || finances === null) {
        throw new Error("Missing the required parameter 'finances' when calling financesProjectBlueprintUuidUserUuidPut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Finances;
      return this.apiClient.callApi(
        '/finances/{project_blueprint_uuid}/{user_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formFieldMapperFormBlueprintUuidFieldUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~formFieldMapperFormBlueprintUuidFieldUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a form-field mapping (admin only)
     * @param {String} formBlueprintUuid The UUID of the form blueprint
     * @param {String} fieldUuid The UUID of the form field
     * @param {module:openapi/controllers/DefaultApi~formFieldMapperFormBlueprintUuidFieldUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    formFieldMapperFormBlueprintUuidFieldUuidDelete(formBlueprintUuid, fieldUuid, callback) {
      let postBody = null;
      // verify the required parameter 'formBlueprintUuid' is set
      if (formBlueprintUuid === undefined || formBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'formBlueprintUuid' when calling formFieldMapperFormBlueprintUuidFieldUuidDelete");
      }
      // verify the required parameter 'fieldUuid' is set
      if (fieldUuid === undefined || fieldUuid === null) {
        throw new Error("Missing the required parameter 'fieldUuid' when calling formFieldMapperFormBlueprintUuidFieldUuidDelete");
      }

      let pathParams = {
        'form_blueprint_uuid': formBlueprintUuid,
        'field_uuid': fieldUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/form-field-mapper/{form_blueprint_uuid}/{field_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formFieldMapperFormBlueprintUuidFieldUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~formFieldMapperFormBlueprintUuidFieldUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/FormFieldMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific form-field mapping
     * @param {String} formBlueprintUuid The UUID of the form blueprint
     * @param {String} fieldUuid The UUID of the form field
     * @param {module:openapi/controllers/DefaultApi~formFieldMapperFormBlueprintUuidFieldUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/FormFieldMapper}
     */
    formFieldMapperFormBlueprintUuidFieldUuidGet(formBlueprintUuid, fieldUuid, callback) {
      let postBody = null;
      // verify the required parameter 'formBlueprintUuid' is set
      if (formBlueprintUuid === undefined || formBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'formBlueprintUuid' when calling formFieldMapperFormBlueprintUuidFieldUuidGet");
      }
      // verify the required parameter 'fieldUuid' is set
      if (fieldUuid === undefined || fieldUuid === null) {
        throw new Error("Missing the required parameter 'fieldUuid' when calling formFieldMapperFormBlueprintUuidFieldUuidGet");
      }

      let pathParams = {
        'form_blueprint_uuid': formBlueprintUuid,
        'field_uuid': fieldUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormFieldMapper;
      return this.apiClient.callApi(
        '/form-field-mapper/{form_blueprint_uuid}/{field_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formFieldMapperFormBlueprintUuidFieldUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~formFieldMapperFormBlueprintUuidFieldUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/FormFieldMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a form-field mapping (admin only)
     * @param {String} formBlueprintUuid The UUID of the form blueprint
     * @param {String} fieldUuid The UUID of the form field
     * @param {module:openapi/models/FormFieldMapper} formFieldMapper 
     * @param {module:openapi/controllers/DefaultApi~formFieldMapperFormBlueprintUuidFieldUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/FormFieldMapper}
     */
    formFieldMapperFormBlueprintUuidFieldUuidPut(formBlueprintUuid, fieldUuid, formFieldMapper, callback) {
      let postBody = formFieldMapper;
      // verify the required parameter 'formBlueprintUuid' is set
      if (formBlueprintUuid === undefined || formBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'formBlueprintUuid' when calling formFieldMapperFormBlueprintUuidFieldUuidPut");
      }
      // verify the required parameter 'fieldUuid' is set
      if (fieldUuid === undefined || fieldUuid === null) {
        throw new Error("Missing the required parameter 'fieldUuid' when calling formFieldMapperFormBlueprintUuidFieldUuidPut");
      }
      // verify the required parameter 'formFieldMapper' is set
      if (formFieldMapper === undefined || formFieldMapper === null) {
        throw new Error("Missing the required parameter 'formFieldMapper' when calling formFieldMapperFormBlueprintUuidFieldUuidPut");
      }

      let pathParams = {
        'form_blueprint_uuid': formBlueprintUuid,
        'field_uuid': fieldUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FormFieldMapper;
      return this.apiClient.callApi(
        '/form-field-mapper/{form_blueprint_uuid}/{field_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formFieldMapperGet operation.
     * @callback module:openapi/controllers/DefaultApi~formFieldMapperGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/FormFieldMapper>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all form-field mappings
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~formFieldMapperGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/FormFieldMapper>}
     */
    formFieldMapperGet(limit, offset, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling formFieldMapperGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling formFieldMapperGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling formFieldMapperGet");
      }

      let pathParams = {
        'user_uuid': userUuid
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FormFieldMapper];
      return this.apiClient.callApi(
        '/form-field-mapper', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formFieldMapperPost operation.
     * @callback module:openapi/controllers/DefaultApi~formFieldMapperPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/FormFieldMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a form-field mapping (admin only)
     * @param {module:openapi/models/FormFieldMapper} formFieldMapper 
     * @param {module:openapi/controllers/DefaultApi~formFieldMapperPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/FormFieldMapper}
     */
    formFieldMapperPost(formFieldMapper, callback) {
      let postBody = formFieldMapper;
      // verify the required parameter 'formFieldMapper' is set
      if (formFieldMapper === undefined || formFieldMapper === null) {
        throw new Error("Missing the required parameter 'formFieldMapper' when calling formFieldMapperPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FormFieldMapper;
      return this.apiClient.callApi(
        '/form-field-mapper', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formInstancesFormBlueprintUuidUserUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~formInstancesFormBlueprintUuidUserUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a form instance
     * @param {String} formBlueprintUuid The UUID of the form blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~formInstancesFormBlueprintUuidUserUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    formInstancesFormBlueprintUuidUserUuidDelete(formBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'formBlueprintUuid' is set
      if (formBlueprintUuid === undefined || formBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'formBlueprintUuid' when calling formInstancesFormBlueprintUuidUserUuidDelete");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling formInstancesFormBlueprintUuidUserUuidDelete");
      }

      let pathParams = {
        'form_blueprint_uuid': formBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/form-instances/{form_blueprint_uuid}/{user_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formInstancesFormBlueprintUuidUserUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~formInstancesFormBlueprintUuidUserUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/FormDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's specific form instance
     * @param {String} formBlueprintUuid The UUID of the form blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~formInstancesFormBlueprintUuidUserUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/FormDTO}
     */
    formInstancesFormBlueprintUuidUserUuidGet(formBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'formBlueprintUuid' is set
      if (formBlueprintUuid === undefined || formBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'formBlueprintUuid' when calling formInstancesFormBlueprintUuidUserUuidGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling formInstancesFormBlueprintUuidUserUuidGet");
      }

      let pathParams = {
        'form_blueprint_uuid': formBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormDTO;
      return this.apiClient.callApi(
        '/form-instances/{form_blueprint_uuid}/{user_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formInstancesFormBlueprintUuidUserUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~formInstancesFormBlueprintUuidUserUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/FormDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a form instance
     * @param {String} formBlueprintUuid The UUID of the form blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/models/FormInstance} formInstance 
     * @param {module:openapi/controllers/DefaultApi~formInstancesFormBlueprintUuidUserUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/FormDTO}
     */
    formInstancesFormBlueprintUuidUserUuidPut(formBlueprintUuid, userUuid, formInstance, callback) {
      let postBody = formInstance;
      // verify the required parameter 'formBlueprintUuid' is set
      if (formBlueprintUuid === undefined || formBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'formBlueprintUuid' when calling formInstancesFormBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling formInstancesFormBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'formInstance' is set
      if (formInstance === undefined || formInstance === null) {
        throw new Error("Missing the required parameter 'formInstance' when calling formInstancesFormBlueprintUuidUserUuidPut");
      }

      let pathParams = {
        'form_blueprint_uuid': formBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FormDTO;
      return this.apiClient.callApi(
        '/form-instances/{form_blueprint_uuid}/{user_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formInstancesGet operation.
     * @callback module:openapi/controllers/DefaultApi~formInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/FormDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all form instances
     * @param {String} userUuid The UUID of the user
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~formInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/FormDTO>}
     */
    formInstancesGet(userUuid, limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling formInstancesGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling formInstancesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling formInstancesGet");
      }

      let pathParams = {
        'user_uuid': userUuid
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FormDTO];
      return this.apiClient.callApi(
        '/form-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formInstancesPost operation.
     * @callback module:openapi/controllers/DefaultApi~formInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/FormDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a form instance (user)
     * @param {module:openapi/models/FormInstance} formInstance 
     * @param {module:openapi/controllers/DefaultApi~formInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/FormDTO}
     */
    formInstancesPost(formInstance, callback) {
      let postBody = formInstance;
      // verify the required parameter 'formInstance' is set
      if (formInstance === undefined || formInstance === null) {
        throw new Error("Missing the required parameter 'formInstance' when calling formInstancesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FormDTO;
      return this.apiClient.callApi(
        '/form-instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formsFormBlueprintUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~formsFormBlueprintUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete form template (admin only)
     * @param {String} formBlueprintUuid The UUID of the form blueprint
     * @param {module:openapi/controllers/DefaultApi~formsFormBlueprintUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    formsFormBlueprintUuidDelete(formBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'formBlueprintUuid' is set
      if (formBlueprintUuid === undefined || formBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'formBlueprintUuid' when calling formsFormBlueprintUuidDelete");
      }

      let pathParams = {
        'form_blueprint_uuid': formBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/forms/{form_blueprint_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formsFormBlueprintUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~formsFormBlueprintUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/FormBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get form template
     * @param {String} formBlueprintUuid The UUID of the form blueprint
     * @param {module:openapi/controllers/DefaultApi~formsFormBlueprintUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/FormBlueprint}
     */
    formsFormBlueprintUuidGet(formBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'formBlueprintUuid' is set
      if (formBlueprintUuid === undefined || formBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'formBlueprintUuid' when calling formsFormBlueprintUuidGet");
      }

      let pathParams = {
        'form_blueprint_uuid': formBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormBlueprint;
      return this.apiClient.callApi(
        '/forms/{form_blueprint_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formsFormBlueprintUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~formsFormBlueprintUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/FormBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update form template (admin only)
     * @param {String} formBlueprintUuid The UUID of the form blueprint
     * @param {module:openapi/models/FormBlueprint} formBlueprint 
     * @param {module:openapi/controllers/DefaultApi~formsFormBlueprintUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/FormBlueprint}
     */
    formsFormBlueprintUuidPut(formBlueprintUuid, formBlueprint, callback) {
      let postBody = formBlueprint;
      // verify the required parameter 'formBlueprintUuid' is set
      if (formBlueprintUuid === undefined || formBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'formBlueprintUuid' when calling formsFormBlueprintUuidPut");
      }
      // verify the required parameter 'formBlueprint' is set
      if (formBlueprint === undefined || formBlueprint === null) {
        throw new Error("Missing the required parameter 'formBlueprint' when calling formsFormBlueprintUuidPut");
      }

      let pathParams = {
        'form_blueprint_uuid': formBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FormBlueprint;
      return this.apiClient.callApi(
        '/forms/{form_blueprint_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formsGet operation.
     * @callback module:openapi/controllers/DefaultApi~formsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/FormBlueprint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List form templates
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~formsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/FormBlueprint>}
     */
    formsGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling formsGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling formsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FormBlueprint];
      return this.apiClient.callApi(
        '/forms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formsPost operation.
     * @callback module:openapi/controllers/DefaultApi~formsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/FormBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create form template (admin only)
     * @param {module:openapi/models/FormBlueprint} formBlueprint 
     * @param {module:openapi/controllers/DefaultApi~formsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/FormBlueprint}
     */
    formsPost(formBlueprint, callback) {
      let postBody = formBlueprint;
      // verify the required parameter 'formBlueprint' is set
      if (formBlueprint === undefined || formBlueprint === null) {
        throw new Error("Missing the required parameter 'formBlueprint' when calling formsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FormBlueprint;
      return this.apiClient.callApi(
        '/forms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaGet operation.
     * @callback module:openapi/controllers/DefaultApi~mediaGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/Media>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Optional) List media items
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~mediaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/Media>}
     */
    mediaGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling mediaGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling mediaGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Media];
      return this.apiClient.callApi(
        '/media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaMediaUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~mediaMediaUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete media (admin only)
     * @param {String} mediaUuid The UUID of the media resource
     * @param {module:openapi/controllers/DefaultApi~mediaMediaUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaMediaUuidDelete(mediaUuid, callback) {
      let postBody = null;
      // verify the required parameter 'mediaUuid' is set
      if (mediaUuid === undefined || mediaUuid === null) {
        throw new Error("Missing the required parameter 'mediaUuid' when calling mediaMediaUuidDelete");
      }

      let pathParams = {
        'media_uuid': mediaUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/{media_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaMediaUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~mediaMediaUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/Media} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get media metadata
     * @param {String} mediaUuid The UUID of the media resource
     * @param {module:openapi/controllers/DefaultApi~mediaMediaUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/Media}
     */
    mediaMediaUuidGet(mediaUuid, callback) {
      let postBody = null;
      // verify the required parameter 'mediaUuid' is set
      if (mediaUuid === undefined || mediaUuid === null) {
        throw new Error("Missing the required parameter 'mediaUuid' when calling mediaMediaUuidGet");
      }

      let pathParams = {
        'media_uuid': mediaUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Media;
      return this.apiClient.callApi(
        '/media/{media_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaMediaUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~mediaMediaUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/Media} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update media metadata (admin only)
     * @param {String} mediaUuid The UUID of the media resource
     * @param {module:openapi/models/Media} media 
     * @param {module:openapi/controllers/DefaultApi~mediaMediaUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/Media}
     */
    mediaMediaUuidPut(mediaUuid, media, callback) {
      let postBody = media;
      // verify the required parameter 'mediaUuid' is set
      if (mediaUuid === undefined || mediaUuid === null) {
        throw new Error("Missing the required parameter 'mediaUuid' when calling mediaMediaUuidPut");
      }
      // verify the required parameter 'media' is set
      if (media === undefined || media === null) {
        throw new Error("Missing the required parameter 'media' when calling mediaMediaUuidPut");
      }

      let pathParams = {
        'media_uuid': mediaUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Media;
      return this.apiClient.callApi(
        '/media/{media_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaPostMultipart operation.
     * @callback module:openapi/controllers/DefaultApi~mediaPostMultipartCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/Media} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload new media (admin only)
     * @param {File} file The file to upload
     * @param {Object} opts Optional parameters
     * @param {String} [description] Media description
     * @param {String} [type] Media type (e.g. video, image, etc.)
     * @param {module:openapi/controllers/DefaultApi~mediaPostMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/Media}
     */
    mediaPostMultipart(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling mediaPostMultipart");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'description': opts['description'],
        'type': opts['type']
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Media;
      return this.apiClient.callApi(
        '/media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersGet operation.
     * @callback module:openapi/controllers/DefaultApi~membersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/Members>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all members records
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~membersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/Members>}
     */
    membersGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling membersGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling membersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Members];
      return this.apiClient.callApi(
        '/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersPost operation.
     * @callback module:openapi/controllers/DefaultApi~membersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/Members} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new members record
     * @param {module:openapi/models/Members} members 
     * @param {module:openapi/controllers/DefaultApi~membersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/Members}
     */
    membersPost(members, callback) {
      let postBody = members;
      // verify the required parameter 'members' is set
      if (members === undefined || members === null) {
        throw new Error("Missing the required parameter 'members' when calling membersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Members;
      return this.apiClient.callApi(
        '/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersProjectBlueprintUuidUserUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a member record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    membersProjectBlueprintUuidUserUuidDelete(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling membersProjectBlueprintUuidUserUuidDelete");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling membersProjectBlueprintUuidUserUuidDelete");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{project_blueprint_uuid}/{user_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersProjectBlueprintUuidUserUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/Members} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one member record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/Members}
     */
    membersProjectBlueprintUuidUserUuidGet(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling membersProjectBlueprintUuidUserUuidGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling membersProjectBlueprintUuidUserUuidGet");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Members;
      return this.apiClient.callApi(
        '/members/{project_blueprint_uuid}/{user_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membersProjectBlueprintUuidUserUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/Members} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a member record
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/models/Members} members 
     * @param {module:openapi/controllers/DefaultApi~membersProjectBlueprintUuidUserUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/Members}
     */
    membersProjectBlueprintUuidUserUuidPut(projectBlueprintUuid, userUuid, members, callback) {
      let postBody = members;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling membersProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling membersProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'members' is set
      if (members === undefined || members === null) {
        throw new Error("Missing the required parameter 'members' when calling membersProjectBlueprintUuidUserUuidPut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Members;
      return this.apiClient.callApi(
        '/members/{project_blueprint_uuid}/{user_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDaysMapperGet operation.
     * @callback module:openapi/controllers/DefaultApi~projectDaysMapperGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/ProjectDaysMapper>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all project-day mappings
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~projectDaysMapperGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/ProjectDaysMapper>}
     */
    projectDaysMapperGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling projectDaysMapperGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling projectDaysMapperGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectDaysMapper];
      return this.apiClient.callApi(
        '/project-days-mapper', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDaysMapperPost operation.
     * @callback module:openapi/controllers/DefaultApi~projectDaysMapperPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/ProjectDaysMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project-day mapping (admin only)
     * @param {module:openapi/models/ProjectDaysMapper} projectDaysMapper 
     * @param {module:openapi/controllers/DefaultApi~projectDaysMapperPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/ProjectDaysMapper}
     */
    projectDaysMapperPost(projectDaysMapper, callback) {
      let postBody = projectDaysMapper;
      // verify the required parameter 'projectDaysMapper' is set
      if (projectDaysMapper === undefined || projectDaysMapper === null) {
        throw new Error("Missing the required parameter 'projectDaysMapper' when calling projectDaysMapperPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectDaysMapper;
      return this.apiClient.callApi(
        '/project-days-mapper', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project-day mapping (admin only)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:openapi/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDelete(projectBlueprintUuid, dayBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDelete");
      }
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDelete");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project-days-mapper/{project_blueprint_uuid}/{day_blueprint_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/ProjectDaysMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project-day mapping
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:openapi/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/ProjectDaysMapper}
     */
    projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGet(projectBlueprintUuid, dayBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGet");
      }
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGet");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectDaysMapper;
      return this.apiClient.callApi(
        '/project-days-mapper/{project_blueprint_uuid}/{day_blueprint_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/ProjectDaysMapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific project-day mapping (admin only)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} dayBlueprintUuid The UUID of the day blueprint
     * @param {module:openapi/models/ProjectDaysMapper} projectDaysMapper 
     * @param {module:openapi/controllers/DefaultApi~projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/ProjectDaysMapper}
     */
    projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut(projectBlueprintUuid, dayBlueprintUuid, projectDaysMapper, callback) {
      let postBody = projectDaysMapper;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut");
      }
      // verify the required parameter 'dayBlueprintUuid' is set
      if (dayBlueprintUuid === undefined || dayBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'dayBlueprintUuid' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut");
      }
      // verify the required parameter 'projectDaysMapper' is set
      if (projectDaysMapper === undefined || projectDaysMapper === null) {
        throw new Error("Missing the required parameter 'projectDaysMapper' when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'day_blueprint_uuid': dayBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectDaysMapper;
      return this.apiClient.callApi(
        '/project-days-mapper/{project_blueprint_uuid}/{day_blueprint_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInstancesGet operation.
     * @callback module:openapi/controllers/DefaultApi~projectInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/ProjectDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all project instances
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~projectInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/ProjectDTO>}
     */
    projectInstancesGet(limit, offset, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling projectInstancesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling projectInstancesGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling projectInstancesGet");
      }

      let pathParams = {
        'user_uuid': userUuid
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectDTO];
      return this.apiClient.callApi(
        '/project-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInstancesPost operation.
     * @callback module:openapi/controllers/DefaultApi~projectInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/ProjectDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project instance (user)
     * @param {module:openapi/models/ProjectInstance} projectInstance 
     * @param {module:openapi/controllers/DefaultApi~projectInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/ProjectDTO}
     */
    projectInstancesPost(projectInstance, callback) {
      let postBody = projectInstance;
      // verify the required parameter 'projectInstance' is set
      if (projectInstance === undefined || projectInstance === null) {
        throw new Error("Missing the required parameter 'projectInstance' when calling projectInstancesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectDTO;
      return this.apiClient.callApi(
        '/project-instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInstancesProjectBlueprintUuidUserUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project instance (admin or user)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectInstancesProjectBlueprintUuidUserUuidDelete(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectInstancesProjectBlueprintUuidUserUuidDelete");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling projectInstancesProjectBlueprintUuidUserUuidDelete");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project-instances/{project_blueprint_uuid}/{user_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInstancesProjectBlueprintUuidUserUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/ProjectDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project instance
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/ProjectDTO}
     */
    projectInstancesProjectBlueprintUuidUserUuidGet(projectBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectInstancesProjectBlueprintUuidUserUuidGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling projectInstancesProjectBlueprintUuidUserUuidGet");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectDTO;
      return this.apiClient.callApi(
        '/project-instances/{project_blueprint_uuid}/{user_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInstancesProjectBlueprintUuidUserUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/ProjectDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project instance (user)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/models/ProjectInstance} projectInstance 
     * @param {module:openapi/controllers/DefaultApi~projectInstancesProjectBlueprintUuidUserUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/ProjectDTO}
     */
    projectInstancesProjectBlueprintUuidUserUuidPut(projectBlueprintUuid, userUuid, projectInstance, callback) {
      let postBody = projectInstance;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectInstancesProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling projectInstancesProjectBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'projectInstance' is set
      if (projectInstance === undefined || projectInstance === null) {
        throw new Error("Missing the required parameter 'projectInstance' when calling projectInstancesProjectBlueprintUuidUserUuidPut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectDTO;
      return this.apiClient.callApi(
        '/project-instances/{project_blueprint_uuid}/{user_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGet operation.
     * @callback module:openapi/controllers/DefaultApi~projectsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/ProjectBlueprint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project blueprints
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~projectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/ProjectBlueprint>}
     */
    projectsGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling projectsGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling projectsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectBlueprint];
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsPost operation.
     * @callback module:openapi/controllers/DefaultApi~projectsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/ProjectBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new project blueprint (admin only)
     * @param {module:openapi/models/ProjectBlueprint} projectBlueprint 
     * @param {module:openapi/controllers/DefaultApi~projectsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/ProjectBlueprint}
     */
    projectsPost(projectBlueprint, callback) {
      let postBody = projectBlueprint;
      // verify the required parameter 'projectBlueprint' is set
      if (projectBlueprint === undefined || projectBlueprint === null) {
        throw new Error("Missing the required parameter 'projectBlueprint' when calling projectsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectBlueprint;
      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectBlueprintUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~projectsProjectBlueprintUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project blueprint (admin only)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {module:openapi/controllers/DefaultApi~projectsProjectBlueprintUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsProjectBlueprintUuidDelete(projectBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectsProjectBlueprintUuidDelete");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{project_blueprint_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectBlueprintUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~projectsProjectBlueprintUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/ProjectBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project blueprint details
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {module:openapi/controllers/DefaultApi~projectsProjectBlueprintUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/ProjectBlueprint}
     */
    projectsProjectBlueprintUuidGet(projectBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectsProjectBlueprintUuidGet");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectBlueprint;
      return this.apiClient.callApi(
        '/projects/{project_blueprint_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsProjectBlueprintUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~projectsProjectBlueprintUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/ProjectBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing project blueprint (admin only)
     * @param {String} projectBlueprintUuid The UUID of the project blueprint
     * @param {module:openapi/models/ProjectBlueprint} projectBlueprint 
     * @param {module:openapi/controllers/DefaultApi~projectsProjectBlueprintUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/ProjectBlueprint}
     */
    projectsProjectBlueprintUuidPut(projectBlueprintUuid, projectBlueprint, callback) {
      let postBody = projectBlueprint;
      // verify the required parameter 'projectBlueprintUuid' is set
      if (projectBlueprintUuid === undefined || projectBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'projectBlueprintUuid' when calling projectsProjectBlueprintUuidPut");
      }
      // verify the required parameter 'projectBlueprint' is set
      if (projectBlueprint === undefined || projectBlueprint === null) {
        throw new Error("Missing the required parameter 'projectBlueprint' when calling projectsProjectBlueprintUuidPut");
      }

      let pathParams = {
        'project_blueprint_uuid': projectBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectBlueprint;
      return this.apiClient.callApi(
        '/projects/{project_blueprint_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskInstancesGet operation.
     * @callback module:openapi/controllers/DefaultApi~taskInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/TaskDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all task instances
     * @param {String} userUuid The UUID of the user
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~taskInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/TaskDTO>}
     */
    taskInstancesGet(userUuid, limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling taskInstancesGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling taskInstancesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling taskInstancesGet");
      }

      let pathParams = {
        'user_uuid': userUuid
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TaskDTO];
      return this.apiClient.callApi(
        '/task-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskInstancesPost operation.
     * @callback module:openapi/controllers/DefaultApi~taskInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/TaskDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new task instance
     * @param {module:openapi/models/TaskInstance} taskInstance 
     * @param {module:openapi/controllers/DefaultApi~taskInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/TaskDTO}
     */
    taskInstancesPost(taskInstance, callback) {
      let postBody = taskInstance;
      // verify the required parameter 'taskInstance' is set
      if (taskInstance === undefined || taskInstance === null) {
        throw new Error("Missing the required parameter 'taskInstance' when calling taskInstancesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskDTO;
      return this.apiClient.callApi(
        '/task-instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskInstancesTaskBlueprintUuidUserUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~taskInstancesTaskBlueprintUuidUserUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a task instance
     * @param {String} taskBlueprintUuid The UUID of the task blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~taskInstancesTaskBlueprintUuidUserUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taskInstancesTaskBlueprintUuidUserUuidDelete(taskBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'taskBlueprintUuid' is set
      if (taskBlueprintUuid === undefined || taskBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'taskBlueprintUuid' when calling taskInstancesTaskBlueprintUuidUserUuidDelete");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling taskInstancesTaskBlueprintUuidUserUuidDelete");
      }

      let pathParams = {
        'task_blueprint_uuid': taskBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/task-instances/{task_blueprint_uuid}/{user_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskInstancesTaskBlueprintUuidUserUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~taskInstancesTaskBlueprintUuidUserUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/TaskDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's specific task instance
     * @param {String} taskBlueprintUuid The UUID of the task blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/controllers/DefaultApi~taskInstancesTaskBlueprintUuidUserUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/TaskDTO}
     */
    taskInstancesTaskBlueprintUuidUserUuidGet(taskBlueprintUuid, userUuid, callback) {
      let postBody = null;
      // verify the required parameter 'taskBlueprintUuid' is set
      if (taskBlueprintUuid === undefined || taskBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'taskBlueprintUuid' when calling taskInstancesTaskBlueprintUuidUserUuidGet");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling taskInstancesTaskBlueprintUuidUserUuidGet");
      }

      let pathParams = {
        'task_blueprint_uuid': taskBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskDTO;
      return this.apiClient.callApi(
        '/task-instances/{task_blueprint_uuid}/{user_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskInstancesTaskBlueprintUuidUserUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~taskInstancesTaskBlueprintUuidUserUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/TaskDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a task instance
     * @param {String} taskBlueprintUuid The UUID of the task blueprint
     * @param {String} userUuid The UUID of the user
     * @param {module:openapi/models/TaskInstance} taskInstance 
     * @param {module:openapi/controllers/DefaultApi~taskInstancesTaskBlueprintUuidUserUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/TaskDTO}
     */
    taskInstancesTaskBlueprintUuidUserUuidPut(taskBlueprintUuid, userUuid, taskInstance, callback) {
      let postBody = taskInstance;
      // verify the required parameter 'taskBlueprintUuid' is set
      if (taskBlueprintUuid === undefined || taskBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'taskBlueprintUuid' when calling taskInstancesTaskBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'userUuid' is set
      if (userUuid === undefined || userUuid === null) {
        throw new Error("Missing the required parameter 'userUuid' when calling taskInstancesTaskBlueprintUuidUserUuidPut");
      }
      // verify the required parameter 'taskInstance' is set
      if (taskInstance === undefined || taskInstance === null) {
        throw new Error("Missing the required parameter 'taskInstance' when calling taskInstancesTaskBlueprintUuidUserUuidPut");
      }

      let pathParams = {
        'task_blueprint_uuid': taskBlueprintUuid,
        'user_uuid': userUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskDTO;
      return this.apiClient.callApi(
        '/task-instances/{task_blueprint_uuid}/{user_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksGet operation.
     * @callback module:openapi/controllers/DefaultApi~tasksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:openapi/models/TaskBlueprint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List task templates
     * @param {Number} limit Limit of the list
     * @param {Number} offset Offset of the list
     * @param {module:openapi/controllers/DefaultApi~tasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:openapi/models/TaskBlueprint>}
     */
    tasksGet(limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling tasksGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling tasksGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TaskBlueprint];
      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksPost operation.
     * @callback module:openapi/controllers/DefaultApi~tasksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/TaskBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create task template (admin only)
     * @param {module:openapi/models/TaskBlueprint} taskBlueprint 
     * @param {module:openapi/controllers/DefaultApi~tasksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/TaskBlueprint}
     */
    tasksPost(taskBlueprint, callback) {
      let postBody = taskBlueprint;
      // verify the required parameter 'taskBlueprint' is set
      if (taskBlueprint === undefined || taskBlueprint === null) {
        throw new Error("Missing the required parameter 'taskBlueprint' when calling tasksPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskBlueprint;
      return this.apiClient.callApi(
        '/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksTaskBlueprintUuidDelete operation.
     * @callback module:openapi/controllers/DefaultApi~tasksTaskBlueprintUuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete task template (admin only)
     * @param {String} taskBlueprintUuid The UUID of the task blueprint
     * @param {module:openapi/controllers/DefaultApi~tasksTaskBlueprintUuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tasksTaskBlueprintUuidDelete(taskBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'taskBlueprintUuid' is set
      if (taskBlueprintUuid === undefined || taskBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'taskBlueprintUuid' when calling tasksTaskBlueprintUuidDelete");
      }

      let pathParams = {
        'task_blueprint_uuid': taskBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{task_blueprint_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksTaskBlueprintUuidGet operation.
     * @callback module:openapi/controllers/DefaultApi~tasksTaskBlueprintUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/TaskBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get task template
     * @param {String} taskBlueprintUuid The UUID of the task blueprint
     * @param {module:openapi/controllers/DefaultApi~tasksTaskBlueprintUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/TaskBlueprint}
     */
    tasksTaskBlueprintUuidGet(taskBlueprintUuid, callback) {
      let postBody = null;
      // verify the required parameter 'taskBlueprintUuid' is set
      if (taskBlueprintUuid === undefined || taskBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'taskBlueprintUuid' when calling tasksTaskBlueprintUuidGet");
      }

      let pathParams = {
        'task_blueprint_uuid': taskBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskBlueprint;
      return this.apiClient.callApi(
        '/tasks/{task_blueprint_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksTaskBlueprintUuidPut operation.
     * @callback module:openapi/controllers/DefaultApi~tasksTaskBlueprintUuidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:openapi/models/TaskBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update task template (admin only)
     * @param {String} taskBlueprintUuid The UUID of the task blueprint
     * @param {module:openapi/models/TaskBlueprint} taskBlueprint 
     * @param {module:openapi/controllers/DefaultApi~tasksTaskBlueprintUuidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:openapi/models/TaskBlueprint}
     */
    tasksTaskBlueprintUuidPut(taskBlueprintUuid, taskBlueprint, callback) {
      let postBody = taskBlueprint;
      // verify the required parameter 'taskBlueprintUuid' is set
      if (taskBlueprintUuid === undefined || taskBlueprintUuid === null) {
        throw new Error("Missing the required parameter 'taskBlueprintUuid' when calling tasksTaskBlueprintUuidPut");
      }
      // verify the required parameter 'taskBlueprint' is set
      if (taskBlueprint === undefined || taskBlueprint === null) {
        throw new Error("Missing the required parameter 'taskBlueprint' when calling tasksTaskBlueprintUuidPut");
      }

      let pathParams = {
        'task_blueprint_uuid': taskBlueprintUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['admin_jwt'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskBlueprint;
      return this.apiClient.callApi(
        '/tasks/{task_blueprint_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
