/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectBlueprint model module.
 * @module openapi/models/ProjectBlueprint
 * @version 1.0.0
 */
class ProjectBlueprint {
    /**
     * Constructs a new <code>ProjectBlueprint</code>.
     * @alias module:openapi/models/ProjectBlueprint
     * @param projectBlueprintUuid {String} UUID for a Project Blueprint
     * @param title {String} 
     */
    constructor(projectBlueprintUuid, title) { 
        
        ProjectBlueprint.initialize(this, projectBlueprintUuid, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, projectBlueprintUuid, title) { 
        obj['project_blueprint_uuid'] = projectBlueprintUuid;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>ProjectBlueprint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:openapi/models/ProjectBlueprint} obj Optional instance to populate.
     * @return {module:openapi/models/ProjectBlueprint} The populated <code>ProjectBlueprint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectBlueprint();

            if (data.hasOwnProperty('project_blueprint_uuid')) {
                obj['project_blueprint_uuid'] = ApiClient.convertToType(data['project_blueprint_uuid'], 'String');
            }
            if (data.hasOwnProperty('poster_url')) {
                obj['poster_url'] = ApiClient.convertToType(data['poster_url'], 'String');
            }
            if (data.hasOwnProperty('welcome_video_url')) {
                obj['welcome_video_url'] = ApiClient.convertToType(data['welcome_video_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('difficulty')) {
                obj['difficulty'] = ApiClient.convertToType(data['difficulty'], 'String');
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = ApiClient.convertToType(data['style'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectBlueprint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectBlueprint</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectBlueprint.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['project_blueprint_uuid'] && !(typeof data['project_blueprint_uuid'] === 'string' || data['project_blueprint_uuid'] instanceof String)) {
            throw new Error("Expected the field `project_blueprint_uuid` to be a primitive type in the JSON string but got " + data['project_blueprint_uuid']);
        }
        // ensure the json data is a string
        if (data['poster_url'] && !(typeof data['poster_url'] === 'string' || data['poster_url'] instanceof String)) {
            throw new Error("Expected the field `poster_url` to be a primitive type in the JSON string but got " + data['poster_url']);
        }
        // ensure the json data is a string
        if (data['welcome_video_url'] && !(typeof data['welcome_video_url'] === 'string' || data['welcome_video_url'] instanceof String)) {
            throw new Error("Expected the field `welcome_video_url` to be a primitive type in the JSON string but got " + data['welcome_video_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['difficulty'] && !(typeof data['difficulty'] === 'string' || data['difficulty'] instanceof String)) {
            throw new Error("Expected the field `difficulty` to be a primitive type in the JSON string but got " + data['difficulty']);
        }
        // ensure the json data is a string
        if (data['style'] && !(typeof data['style'] === 'string' || data['style'] instanceof String)) {
            throw new Error("Expected the field `style` to be a primitive type in the JSON string but got " + data['style']);
        }

        return true;
    }


}

ProjectBlueprint.RequiredProperties = ["project_blueprint_uuid", "title"];

/**
 * UUID for a Project Blueprint
 * @member {String} project_blueprint_uuid
 */
ProjectBlueprint.prototype['project_blueprint_uuid'] = undefined;

/**
 * URL for the project poster image
 * @member {String} poster_url
 */
ProjectBlueprint.prototype['poster_url'] = undefined;

/**
 * URL for the project introduction video
 * @member {String} welcome_video_url
 */
ProjectBlueprint.prototype['welcome_video_url'] = undefined;

/**
 * @member {String} title
 */
ProjectBlueprint.prototype['title'] = undefined;

/**
 * @member {String} description
 */
ProjectBlueprint.prototype['description'] = undefined;

/**
 * @member {module:openapi/models/ProjectBlueprint.DifficultyEnum} difficulty
 */
ProjectBlueprint.prototype['difficulty'] = undefined;

/**
 * @member {module:openapi/models/ProjectBlueprint.StyleEnum} style
 */
ProjectBlueprint.prototype['style'] = undefined;





/**
 * Allowed values for the <code>difficulty</code> property.
 * @enum {String}
 * @readonly
 */
ProjectBlueprint['DifficultyEnum'] = {

    /**
     * value: "EASY"
     * @const
     */
    "EASY": "EASY",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HARD"
     * @const
     */
    "HARD": "HARD"
};


/**
 * Allowed values for the <code>style</code> property.
 * @enum {String}
 * @readonly
 */
ProjectBlueprint['StyleEnum'] = {

    /**
     * value: "DIY"
     * @const
     */
    "DIY": "DIY",

    /**
     * value: "READY-MADE"
     * @const
     */
    "READY-MADE": "READY-MADE"
};



export default ProjectBlueprint;

