/* tslint:disable */
/* eslint-disable */
/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FormBlueprint,
  FormDTO,
  FormFieldMapper,
  FormInstance,
} from '../models';
import {
    FormBlueprintFromJSON,
    FormBlueprintToJSON,
    FormDTOFromJSON,
    FormDTOToJSON,
    FormFieldMapperFromJSON,
    FormFieldMapperToJSON,
    FormInstanceFromJSON,
    FormInstanceToJSON,
} from '../models';

export interface FormFieldMapperFormBlueprintUuidFieldUuidDeleteRequest {
    formBlueprintUuid: string;
    fieldUuid: string;
}

export interface FormFieldMapperFormBlueprintUuidFieldUuidGetRequest {
    formBlueprintUuid: string;
    fieldUuid: string;
}

export interface FormFieldMapperFormBlueprintUuidFieldUuidPutRequest {
    formBlueprintUuid: string;
    fieldUuid: string;
    formFieldMapper: FormFieldMapper;
}

export interface FormFieldMapperGetRequest {
    limit: number;
    offset: number;
    userUuid: string;
}

export interface FormFieldMapperPostRequest {
    formFieldMapper: FormFieldMapper;
}

export interface FormInstancesFormBlueprintUuidUserUuidDeleteRequest {
    formBlueprintUuid: string;
    userUuid: string;
}

export interface FormInstancesFormBlueprintUuidUserUuidGetRequest {
    formBlueprintUuid: string;
    userUuid: string;
}

export interface FormInstancesFormBlueprintUuidUserUuidPutRequest {
    formBlueprintUuid: string;
    userUuid: string;
    formInstance: FormInstance;
}

export interface FormInstancesGetRequest {
    userUuid: string;
    limit: number;
    offset: number;
}

export interface FormInstancesPostRequest {
    formInstance: FormInstance;
}

export interface FormsFormBlueprintUuidDeleteRequest {
    formBlueprintUuid: string;
}

export interface FormsFormBlueprintUuidGetRequest {
    formBlueprintUuid: string;
}

export interface FormsFormBlueprintUuidPutRequest {
    formBlueprintUuid: string;
    formBlueprint: FormBlueprint;
}

export interface FormsGetRequest {
    limit: number;
    offset: number;
}

export interface FormsPostRequest {
    formBlueprint: FormBlueprint;
}

/**
 * 
 */
export class FormsApi extends runtime.BaseAPI {

    /**
     * Delete a form-field mapping (admin only)
     */
    async formFieldMapperFormBlueprintUuidFieldUuidDeleteRaw(requestParameters: FormFieldMapperFormBlueprintUuidFieldUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['formBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'formBlueprintUuid',
                'Required parameter "formBlueprintUuid" was null or undefined when calling formFieldMapperFormBlueprintUuidFieldUuidDelete().'
            );
        }

        if (requestParameters['fieldUuid'] == null) {
            throw new runtime.RequiredError(
                'fieldUuid',
                'Required parameter "fieldUuid" was null or undefined when calling formFieldMapperFormBlueprintUuidFieldUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/form-field-mapper/{form_blueprint_uuid}/{field_uuid}`.replace(`{${"form_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['formBlueprintUuid']))).replace(`{${"field_uuid"}}`, encodeURIComponent(String(requestParameters['fieldUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a form-field mapping (admin only)
     */
    async formFieldMapperFormBlueprintUuidFieldUuidDelete(requestParameters: FormFieldMapperFormBlueprintUuidFieldUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.formFieldMapperFormBlueprintUuidFieldUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific form-field mapping
     */
    async formFieldMapperFormBlueprintUuidFieldUuidGetRaw(requestParameters: FormFieldMapperFormBlueprintUuidFieldUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormFieldMapper>> {
        if (requestParameters['formBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'formBlueprintUuid',
                'Required parameter "formBlueprintUuid" was null or undefined when calling formFieldMapperFormBlueprintUuidFieldUuidGet().'
            );
        }

        if (requestParameters['fieldUuid'] == null) {
            throw new runtime.RequiredError(
                'fieldUuid',
                'Required parameter "fieldUuid" was null or undefined when calling formFieldMapperFormBlueprintUuidFieldUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/form-field-mapper/{form_blueprint_uuid}/{field_uuid}`.replace(`{${"form_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['formBlueprintUuid']))).replace(`{${"field_uuid"}}`, encodeURIComponent(String(requestParameters['fieldUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldMapperFromJSON(jsonValue));
    }

    /**
     * Get a specific form-field mapping
     */
    async formFieldMapperFormBlueprintUuidFieldUuidGet(requestParameters: FormFieldMapperFormBlueprintUuidFieldUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormFieldMapper> {
        const response = await this.formFieldMapperFormBlueprintUuidFieldUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a form-field mapping (admin only)
     */
    async formFieldMapperFormBlueprintUuidFieldUuidPutRaw(requestParameters: FormFieldMapperFormBlueprintUuidFieldUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormFieldMapper>> {
        if (requestParameters['formBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'formBlueprintUuid',
                'Required parameter "formBlueprintUuid" was null or undefined when calling formFieldMapperFormBlueprintUuidFieldUuidPut().'
            );
        }

        if (requestParameters['fieldUuid'] == null) {
            throw new runtime.RequiredError(
                'fieldUuid',
                'Required parameter "fieldUuid" was null or undefined when calling formFieldMapperFormBlueprintUuidFieldUuidPut().'
            );
        }

        if (requestParameters['formFieldMapper'] == null) {
            throw new runtime.RequiredError(
                'formFieldMapper',
                'Required parameter "formFieldMapper" was null or undefined when calling formFieldMapperFormBlueprintUuidFieldUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/form-field-mapper/{form_blueprint_uuid}/{field_uuid}`.replace(`{${"form_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['formBlueprintUuid']))).replace(`{${"field_uuid"}}`, encodeURIComponent(String(requestParameters['fieldUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FormFieldMapperToJSON(requestParameters['formFieldMapper']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldMapperFromJSON(jsonValue));
    }

    /**
     * Update a form-field mapping (admin only)
     */
    async formFieldMapperFormBlueprintUuidFieldUuidPut(requestParameters: FormFieldMapperFormBlueprintUuidFieldUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormFieldMapper> {
        const response = await this.formFieldMapperFormBlueprintUuidFieldUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all form-field mappings
     */
    async formFieldMapperGetRaw(requestParameters: FormFieldMapperGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FormFieldMapper>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling formFieldMapperGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling formFieldMapperGet().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling formFieldMapperGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/form-field-mapper`.replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormFieldMapperFromJSON));
    }

    /**
     * List all form-field mappings
     */
    async formFieldMapperGet(requestParameters: FormFieldMapperGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FormFieldMapper>> {
        const response = await this.formFieldMapperGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a form-field mapping (admin only)
     */
    async formFieldMapperPostRaw(requestParameters: FormFieldMapperPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormFieldMapper>> {
        if (requestParameters['formFieldMapper'] == null) {
            throw new runtime.RequiredError(
                'formFieldMapper',
                'Required parameter "formFieldMapper" was null or undefined when calling formFieldMapperPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/form-field-mapper`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormFieldMapperToJSON(requestParameters['formFieldMapper']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldMapperFromJSON(jsonValue));
    }

    /**
     * Create a form-field mapping (admin only)
     */
    async formFieldMapperPost(requestParameters: FormFieldMapperPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormFieldMapper> {
        const response = await this.formFieldMapperPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a form instance
     */
    async formInstancesFormBlueprintUuidUserUuidDeleteRaw(requestParameters: FormInstancesFormBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['formBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'formBlueprintUuid',
                'Required parameter "formBlueprintUuid" was null or undefined when calling formInstancesFormBlueprintUuidUserUuidDelete().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling formInstancesFormBlueprintUuidUserUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/form-instances/{form_blueprint_uuid}/{user_uuid}`.replace(`{${"form_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['formBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a form instance
     */
    async formInstancesFormBlueprintUuidUserUuidDelete(requestParameters: FormInstancesFormBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.formInstancesFormBlueprintUuidUserUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a user\'s specific form instance
     */
    async formInstancesFormBlueprintUuidUserUuidGetRaw(requestParameters: FormInstancesFormBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormDTO>> {
        if (requestParameters['formBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'formBlueprintUuid',
                'Required parameter "formBlueprintUuid" was null or undefined when calling formInstancesFormBlueprintUuidUserUuidGet().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling formInstancesFormBlueprintUuidUserUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/form-instances/{form_blueprint_uuid}/{user_uuid}`.replace(`{${"form_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['formBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormDTOFromJSON(jsonValue));
    }

    /**
     * Get a user\'s specific form instance
     */
    async formInstancesFormBlueprintUuidUserUuidGet(requestParameters: FormInstancesFormBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormDTO> {
        const response = await this.formInstancesFormBlueprintUuidUserUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a form instance
     */
    async formInstancesFormBlueprintUuidUserUuidPutRaw(requestParameters: FormInstancesFormBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormDTO>> {
        if (requestParameters['formBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'formBlueprintUuid',
                'Required parameter "formBlueprintUuid" was null or undefined when calling formInstancesFormBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling formInstancesFormBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['formInstance'] == null) {
            throw new runtime.RequiredError(
                'formInstance',
                'Required parameter "formInstance" was null or undefined when calling formInstancesFormBlueprintUuidUserUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/form-instances/{form_blueprint_uuid}/{user_uuid}`.replace(`{${"form_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['formBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FormInstanceToJSON(requestParameters['formInstance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormDTOFromJSON(jsonValue));
    }

    /**
     * Update a form instance
     */
    async formInstancesFormBlueprintUuidUserUuidPut(requestParameters: FormInstancesFormBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormDTO> {
        const response = await this.formInstancesFormBlueprintUuidUserUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all form instances
     */
    async formInstancesGetRaw(requestParameters: FormInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FormDTO>>> {
        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling formInstancesGet().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling formInstancesGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling formInstancesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/form-instances`.replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormDTOFromJSON));
    }

    /**
     * List all form instances
     */
    async formInstancesGet(requestParameters: FormInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FormDTO>> {
        const response = await this.formInstancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a form instance (user)
     */
    async formInstancesPostRaw(requestParameters: FormInstancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormDTO>> {
        if (requestParameters['formInstance'] == null) {
            throw new runtime.RequiredError(
                'formInstance',
                'Required parameter "formInstance" was null or undefined when calling formInstancesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/form-instances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormInstanceToJSON(requestParameters['formInstance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormDTOFromJSON(jsonValue));
    }

    /**
     * Create a form instance (user)
     */
    async formInstancesPost(requestParameters: FormInstancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormDTO> {
        const response = await this.formInstancesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete form template (admin only)
     */
    async formsFormBlueprintUuidDeleteRaw(requestParameters: FormsFormBlueprintUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['formBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'formBlueprintUuid',
                'Required parameter "formBlueprintUuid" was null or undefined when calling formsFormBlueprintUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/forms/{form_blueprint_uuid}`.replace(`{${"form_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['formBlueprintUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete form template (admin only)
     */
    async formsFormBlueprintUuidDelete(requestParameters: FormsFormBlueprintUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.formsFormBlueprintUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get form template
     */
    async formsFormBlueprintUuidGetRaw(requestParameters: FormsFormBlueprintUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormBlueprint>> {
        if (requestParameters['formBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'formBlueprintUuid',
                'Required parameter "formBlueprintUuid" was null or undefined when calling formsFormBlueprintUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forms/{form_blueprint_uuid}`.replace(`{${"form_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['formBlueprintUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormBlueprintFromJSON(jsonValue));
    }

    /**
     * Get form template
     */
    async formsFormBlueprintUuidGet(requestParameters: FormsFormBlueprintUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormBlueprint> {
        const response = await this.formsFormBlueprintUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update form template (admin only)
     */
    async formsFormBlueprintUuidPutRaw(requestParameters: FormsFormBlueprintUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormBlueprint>> {
        if (requestParameters['formBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'formBlueprintUuid',
                'Required parameter "formBlueprintUuid" was null or undefined when calling formsFormBlueprintUuidPut().'
            );
        }

        if (requestParameters['formBlueprint'] == null) {
            throw new runtime.RequiredError(
                'formBlueprint',
                'Required parameter "formBlueprint" was null or undefined when calling formsFormBlueprintUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/forms/{form_blueprint_uuid}`.replace(`{${"form_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['formBlueprintUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FormBlueprintToJSON(requestParameters['formBlueprint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormBlueprintFromJSON(jsonValue));
    }

    /**
     * Update form template (admin only)
     */
    async formsFormBlueprintUuidPut(requestParameters: FormsFormBlueprintUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormBlueprint> {
        const response = await this.formsFormBlueprintUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List form templates
     */
    async formsGetRaw(requestParameters: FormsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FormBlueprint>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling formsGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling formsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormBlueprintFromJSON));
    }

    /**
     * List form templates
     */
    async formsGet(requestParameters: FormsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FormBlueprint>> {
        const response = await this.formsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create form template (admin only)
     */
    async formsPostRaw(requestParameters: FormsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormBlueprint>> {
        if (requestParameters['formBlueprint'] == null) {
            throw new runtime.RequiredError(
                'formBlueprint',
                'Required parameter "formBlueprint" was null or undefined when calling formsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/forms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormBlueprintToJSON(requestParameters['formBlueprint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormBlueprintFromJSON(jsonValue));
    }

    /**
     * Create form template (admin only)
     */
    async formsPost(requestParameters: FormsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormBlueprint> {
        const response = await this.formsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
