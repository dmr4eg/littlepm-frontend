/* tslint:disable */
/* eslint-disable */
/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProjectInstanceId } from './ProjectInstanceId';
import {
    ProjectInstanceIdFromJSON,
    ProjectInstanceIdFromJSONTyped,
    ProjectInstanceIdToJSON,
    ProjectInstanceIdToJSONTyped,
} from './ProjectInstanceId';

/**
 * Entity for a user's specific project instance
 * @export
 * @interface ProjectInstance
 */
export interface ProjectInstance {
    /**
     * 
     * @type {ProjectInstanceId}
     * @memberof ProjectInstance
     */
    id: ProjectInstanceId;
    /**
     * 
     * @type {string}
     * @memberof ProjectInstance
     */
    status: ProjectInstanceStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof ProjectInstance
     */
    startDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProjectInstance
     */
    endDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ProjectInstance
     */
    feedback?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectInstance
     */
    whatWentWell?: string;
}


/**
 * @export
 */
export const ProjectInstanceStatusEnum = {
    InProgress: 'IN_PROGRESS',
    Completed: 'COMPLETED'
} as const;
export type ProjectInstanceStatusEnum = typeof ProjectInstanceStatusEnum[keyof typeof ProjectInstanceStatusEnum];


/**
 * Check if a given object implements the ProjectInstance interface.
 */
export function instanceOfProjectInstance(value: object): value is ProjectInstance {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function ProjectInstanceFromJSON(json: any): ProjectInstance {
    return ProjectInstanceFromJSONTyped(json, false);
}

export function ProjectInstanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectInstance {
    if (json == null) {
        return json;
    }
    return {
        
        'id': ProjectInstanceIdFromJSON(json['id']),
        'status': json['status'],
        'startDate': json['start_date'] == null ? undefined : (new Date(json['start_date'])),
        'endDate': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
        'feedback': json['feedback'] == null ? undefined : json['feedback'],
        'whatWentWell': json['what_went_well'] == null ? undefined : json['what_went_well'],
    };
}

export function ProjectInstanceToJSON(json: any): ProjectInstance {
    return ProjectInstanceToJSONTyped(json, false);
}

export function ProjectInstanceToJSONTyped(value?: ProjectInstance | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': ProjectInstanceIdToJSON(value['id']),
        'status': value['status'],
        'start_date': value['startDate'] == null ? undefined : ((value['startDate']).toISOString()),
        'end_date': value['endDate'] == null ? undefined : ((value['endDate']).toISOString()),
        'feedback': value['feedback'],
        'what_went_well': value['whatWentWell'],
    };
}

