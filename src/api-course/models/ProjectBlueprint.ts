/* tslint:disable */
/* eslint-disable */
/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProjectBlueprint
 */
export interface ProjectBlueprint {
    /**
     * UUID for a Project Blueprint
     * @type {string}
     * @memberof ProjectBlueprint
     */
    projectBlueprintUuid: string;
    /**
     * URL for the project poster image
     * @type {string}
     * @memberof ProjectBlueprint
     */
    posterUrl?: string;
    /**
     * URL for the project introduction video
     * @type {string}
     * @memberof ProjectBlueprint
     */
    welcomeVideoUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectBlueprint
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectBlueprint
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectBlueprint
     */
    difficulty?: ProjectBlueprintDifficultyEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjectBlueprint
     */
    style?: ProjectBlueprintStyleEnum;
}


/**
 * @export
 */
export const ProjectBlueprintDifficultyEnum = {
    Easy: 'EASY',
    Medium: 'MEDIUM',
    Hard: 'HARD'
} as const;
export type ProjectBlueprintDifficultyEnum = typeof ProjectBlueprintDifficultyEnum[keyof typeof ProjectBlueprintDifficultyEnum];

/**
 * @export
 */
export const ProjectBlueprintStyleEnum = {
    Diy: 'DIY',
    ReadyMade: 'READY-MADE'
} as const;
export type ProjectBlueprintStyleEnum = typeof ProjectBlueprintStyleEnum[keyof typeof ProjectBlueprintStyleEnum];


/**
 * Check if a given object implements the ProjectBlueprint interface.
 */
export function instanceOfProjectBlueprint(value: object): value is ProjectBlueprint {
    if (!('projectBlueprintUuid' in value) || value['projectBlueprintUuid'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function ProjectBlueprintFromJSON(json: any): ProjectBlueprint {
    return ProjectBlueprintFromJSONTyped(json, false);
}

export function ProjectBlueprintFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectBlueprint {
    if (json == null) {
        return json;
    }
    return {
        
        'projectBlueprintUuid': json['project_blueprint_uuid'],
        'posterUrl': json['poster_url'] == null ? undefined : json['poster_url'],
        'welcomeVideoUrl': json['welcome_video_url'] == null ? undefined : json['welcome_video_url'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'difficulty': json['difficulty'] == null ? undefined : json['difficulty'],
        'style': json['style'] == null ? undefined : json['style'],
    };
}

export function ProjectBlueprintToJSON(json: any): ProjectBlueprint {
    return ProjectBlueprintToJSONTyped(json, false);
}

export function ProjectBlueprintToJSONTyped(value?: ProjectBlueprint | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'project_blueprint_uuid': value['projectBlueprintUuid'],
        'poster_url': value['posterUrl'],
        'welcome_video_url': value['welcomeVideoUrl'],
        'title': value['title'],
        'description': value['description'],
        'difficulty': value['difficulty'],
        'style': value['style'],
    };
}

