/* tslint:disable */
/* eslint-disable */
/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProjectBlueprint,
  ProjectDTO,
  ProjectDaysMapper,
  ProjectInstance,
} from '../models/index';
import {
    ProjectBlueprintFromJSON,
    ProjectBlueprintToJSON,
    ProjectDTOFromJSON,
    ProjectDTOToJSON,
    ProjectDaysMapperFromJSON,
    ProjectDaysMapperToJSON,
    ProjectInstanceFromJSON,
    ProjectInstanceToJSON,
} from '../models/index';

export interface ProjectDaysMapperGetRequest {
    limit: number;
    offset: number;
}

export interface ProjectDaysMapperPostRequest {
    projectDaysMapper: ProjectDaysMapper;
}

export interface ProjectDaysMapperProjectBlueprintUuidDayBlueprintUuidDeleteRequest {
    projectBlueprintUuid: string;
    dayBlueprintUuid: string;
}

export interface ProjectDaysMapperProjectBlueprintUuidDayBlueprintUuidGetRequest {
    projectBlueprintUuid: string;
    dayBlueprintUuid: string;
}

export interface ProjectDaysMapperProjectBlueprintUuidDayBlueprintUuidPutRequest {
    projectBlueprintUuid: string;
    dayBlueprintUuid: string;
    projectDaysMapper: ProjectDaysMapper;
}

export interface ProjectInstancesGetRequest {
    limit: number;
    offset: number;
    userUuid: string;
}

export interface ProjectInstancesPostRequest {
    projectInstance: ProjectInstance;
}

export interface ProjectInstancesProjectBlueprintUuidUserUuidDeleteRequest {
    projectBlueprintUuid: string;
    userUuid: string;
}

export interface ProjectInstancesProjectBlueprintUuidUserUuidGetRequest {
    projectBlueprintUuid: string;
    userUuid: string;
}

export interface ProjectInstancesProjectBlueprintUuidUserUuidPutRequest {
    projectBlueprintUuid: string;
    userUuid: string;
    projectInstance: ProjectInstance;
}

export interface ProjectsGetRequest {
    limit: number;
    offset: number;
}

export interface ProjectsPostRequest {
    projectBlueprint: ProjectBlueprint;
}

export interface ProjectsProjectBlueprintUuidDeleteRequest {
    projectBlueprintUuid: string;
}

export interface ProjectsProjectBlueprintUuidGetRequest {
    projectBlueprintUuid: string;
}

export interface ProjectsProjectBlueprintUuidPutRequest {
    projectBlueprintUuid: string;
    projectBlueprint: ProjectBlueprint;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     * List all project-day mappings
     */
    async projectDaysMapperGetRaw(requestParameters: ProjectDaysMapperGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectDaysMapper>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling projectDaysMapperGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling projectDaysMapperGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-days-mapper`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectDaysMapperFromJSON));
    }

    /**
     * List all project-day mappings
     */
    async projectDaysMapperGet(requestParameters: ProjectDaysMapperGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectDaysMapper>> {
        const response = await this.projectDaysMapperGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new project-day mapping (admin only)
     */
    async projectDaysMapperPostRaw(requestParameters: ProjectDaysMapperPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDaysMapper>> {
        if (requestParameters['projectDaysMapper'] == null) {
            throw new runtime.RequiredError(
                'projectDaysMapper',
                'Required parameter "projectDaysMapper" was null or undefined when calling projectDaysMapperPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project-days-mapper`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectDaysMapperToJSON(requestParameters['projectDaysMapper']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDaysMapperFromJSON(jsonValue));
    }

    /**
     * Create a new project-day mapping (admin only)
     */
    async projectDaysMapperPost(requestParameters: ProjectDaysMapperPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDaysMapper> {
        const response = await this.projectDaysMapperPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete project-day mapping (admin only)
     */
    async projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDeleteRaw(requestParameters: ProjectDaysMapperProjectBlueprintUuidDayBlueprintUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDelete().'
            );
        }

        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project-days-mapper/{project_blueprint_uuid}/{day_blueprint_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete project-day mapping (admin only)
     */
    async projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDelete(requestParameters: ProjectDaysMapperProjectBlueprintUuidDayBlueprintUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectDaysMapperProjectBlueprintUuidDayBlueprintUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific project-day mapping
     */
    async projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGetRaw(requestParameters: ProjectDaysMapperProjectBlueprintUuidDayBlueprintUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDaysMapper>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGet().'
            );
        }

        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-days-mapper/{project_blueprint_uuid}/{day_blueprint_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDaysMapperFromJSON(jsonValue));
    }

    /**
     * Get a specific project-day mapping
     */
    async projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGet(requestParameters: ProjectDaysMapperProjectBlueprintUuidDayBlueprintUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDaysMapper> {
        const response = await this.projectDaysMapperProjectBlueprintUuidDayBlueprintUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a specific project-day mapping (admin only)
     */
    async projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPutRaw(requestParameters: ProjectDaysMapperProjectBlueprintUuidDayBlueprintUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDaysMapper>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut().'
            );
        }

        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut().'
            );
        }

        if (requestParameters['projectDaysMapper'] == null) {
            throw new runtime.RequiredError(
                'projectDaysMapper',
                'Required parameter "projectDaysMapper" was null or undefined when calling projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project-days-mapper/{project_blueprint_uuid}/{day_blueprint_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectDaysMapperToJSON(requestParameters['projectDaysMapper']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDaysMapperFromJSON(jsonValue));
    }

    /**
     * Update a specific project-day mapping (admin only)
     */
    async projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPut(requestParameters: ProjectDaysMapperProjectBlueprintUuidDayBlueprintUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDaysMapper> {
        const response = await this.projectDaysMapperProjectBlueprintUuidDayBlueprintUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all project instances
     */
    async projectInstancesGetRaw(requestParameters: ProjectInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectDTO>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling projectInstancesGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling projectInstancesGet().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling projectInstancesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project-instances`.replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectDTOFromJSON));
    }

    /**
     * List all project instances
     */
    async projectInstancesGet(requestParameters: ProjectInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectDTO>> {
        const response = await this.projectInstancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new project instance (user)
     */
    async projectInstancesPostRaw(requestParameters: ProjectInstancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDTO>> {
        if (requestParameters['projectInstance'] == null) {
            throw new runtime.RequiredError(
                'projectInstance',
                'Required parameter "projectInstance" was null or undefined when calling projectInstancesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project-instances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectInstanceToJSON(requestParameters['projectInstance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDTOFromJSON(jsonValue));
    }

    /**
     * Create a new project instance (user)
     */
    async projectInstancesPost(requestParameters: ProjectInstancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDTO> {
        const response = await this.projectInstancesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a project instance (admin or user)
     */
    async projectInstancesProjectBlueprintUuidUserUuidDeleteRaw(requestParameters: ProjectInstancesProjectBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling projectInstancesProjectBlueprintUuidUserUuidDelete().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling projectInstancesProjectBlueprintUuidUserUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project-instances/{project_blueprint_uuid}/{user_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a project instance (admin or user)
     */
    async projectInstancesProjectBlueprintUuidUserUuidDelete(requestParameters: ProjectInstancesProjectBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectInstancesProjectBlueprintUuidUserUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific project instance
     */
    async projectInstancesProjectBlueprintUuidUserUuidGetRaw(requestParameters: ProjectInstancesProjectBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDTO>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling projectInstancesProjectBlueprintUuidUserUuidGet().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling projectInstancesProjectBlueprintUuidUserUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project-instances/{project_blueprint_uuid}/{user_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDTOFromJSON(jsonValue));
    }

    /**
     * Get a specific project instance
     */
    async projectInstancesProjectBlueprintUuidUserUuidGet(requestParameters: ProjectInstancesProjectBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDTO> {
        const response = await this.projectInstancesProjectBlueprintUuidUserUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a project instance (user)
     */
    async projectInstancesProjectBlueprintUuidUserUuidPutRaw(requestParameters: ProjectInstancesProjectBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDTO>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling projectInstancesProjectBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling projectInstancesProjectBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['projectInstance'] == null) {
            throw new runtime.RequiredError(
                'projectInstance',
                'Required parameter "projectInstance" was null or undefined when calling projectInstancesProjectBlueprintUuidUserUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project-instances/{project_blueprint_uuid}/{user_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectInstanceToJSON(requestParameters['projectInstance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDTOFromJSON(jsonValue));
    }

    /**
     * Update a project instance (user)
     */
    async projectInstancesProjectBlueprintUuidUserUuidPut(requestParameters: ProjectInstancesProjectBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDTO> {
        const response = await this.projectInstancesProjectBlueprintUuidUserUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List project blueprints
     */
    async projectsGetRaw(requestParameters: ProjectsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectBlueprint>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling projectsGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling projectsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectBlueprintFromJSON));
    }

    /**
     * List project blueprints
     */
    async projectsGet(requestParameters: ProjectsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectBlueprint>> {
        const response = await this.projectsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new project blueprint (admin only)
     */
    async projectsPostRaw(requestParameters: ProjectsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectBlueprint>> {
        if (requestParameters['projectBlueprint'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprint',
                'Required parameter "projectBlueprint" was null or undefined when calling projectsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectBlueprintToJSON(requestParameters['projectBlueprint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectBlueprintFromJSON(jsonValue));
    }

    /**
     * Create new project blueprint (admin only)
     */
    async projectsPost(requestParameters: ProjectsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectBlueprint> {
        const response = await this.projectsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a project blueprint (admin only)
     */
    async projectsProjectBlueprintUuidDeleteRaw(requestParameters: ProjectsProjectBlueprintUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling projectsProjectBlueprintUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_blueprint_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a project blueprint (admin only)
     */
    async projectsProjectBlueprintUuidDelete(requestParameters: ProjectsProjectBlueprintUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectsProjectBlueprintUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get project blueprint details
     */
    async projectsProjectBlueprintUuidGetRaw(requestParameters: ProjectsProjectBlueprintUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectBlueprint>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling projectsProjectBlueprintUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{project_blueprint_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectBlueprintFromJSON(jsonValue));
    }

    /**
     * Get project blueprint details
     */
    async projectsProjectBlueprintUuidGet(requestParameters: ProjectsProjectBlueprintUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectBlueprint> {
        const response = await this.projectsProjectBlueprintUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing project blueprint (admin only)
     */
    async projectsProjectBlueprintUuidPutRaw(requestParameters: ProjectsProjectBlueprintUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectBlueprint>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling projectsProjectBlueprintUuidPut().'
            );
        }

        if (requestParameters['projectBlueprint'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprint',
                'Required parameter "projectBlueprint" was null or undefined when calling projectsProjectBlueprintUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_blueprint_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectBlueprintToJSON(requestParameters['projectBlueprint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectBlueprintFromJSON(jsonValue));
    }

    /**
     * Update an existing project blueprint (admin only)
     */
    async projectsProjectBlueprintUuidPut(requestParameters: ProjectsProjectBlueprintUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectBlueprint> {
        const response = await this.projectsProjectBlueprintUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
