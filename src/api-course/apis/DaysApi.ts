/* tslint:disable */
/* eslint-disable */
/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DayBlueprint,
  DayComponentsMapper,
  DayDTO,
  DayInstance,
} from '../models/index';
import {
    DayBlueprintFromJSON,
    DayBlueprintToJSON,
    DayComponentsMapperFromJSON,
    DayComponentsMapperToJSON,
    DayDTOFromJSON,
    DayDTOToJSON,
    DayInstanceFromJSON,
    DayInstanceToJSON,
} from '../models/index';

export interface DayComponentsMapperDayBlueprintUuidComponentUuidDeleteRequest {
    dayBlueprintUuid: string;
    componentUuid: string;
}

export interface DayComponentsMapperDayBlueprintUuidComponentUuidGetRequest {
    dayBlueprintUuid: string;
    componentUuid: string;
}

export interface DayComponentsMapperDayBlueprintUuidComponentUuidPutRequest {
    dayBlueprintUuid: string;
    componentUuid: string;
    dayComponentsMapper: DayComponentsMapper;
}

export interface DayComponentsMapperGetRequest {
    limit: number;
    offset: number;
}

export interface DayComponentsMapperPostRequest {
    dayComponentsMapper: DayComponentsMapper;
}

export interface DayInstancesDayBlueprintUuidUserUuidDeleteRequest {
    dayBlueprintUuid: string;
    userUuid: string;
}

export interface DayInstancesDayBlueprintUuidUserUuidGetRequest {
    dayBlueprintUuid: string;
    userUuid: string;
}

export interface DayInstancesDayBlueprintUuidUserUuidPutRequest {
    dayBlueprintUuid: string;
    userUuid: string;
    dayInstance: DayInstance;
}

export interface DayInstancesGetRequest {
    userUuid: string;
    limit: number;
    offset: number;
}

export interface DayInstancesPostRequest {
    dayInstance: DayInstance;
}

export interface DaysDayBlueprintUuidDeleteRequest {
    dayBlueprintUuid: string;
}

export interface DaysDayBlueprintUuidGetRequest {
    dayBlueprintUuid: string;
}

export interface DaysDayBlueprintUuidPutRequest {
    dayBlueprintUuid: string;
    dayBlueprint: DayBlueprint;
}

export interface DaysGetRequest {
    limit: number;
    offset: number;
}

export interface DaysPostRequest {
    dayBlueprint: DayBlueprint;
}

/**
 * 
 */
export class DaysApi extends runtime.BaseAPI {

    /**
     * Delete day-component mapping (admin only)
     */
    async dayComponentsMapperDayBlueprintUuidComponentUuidDeleteRaw(requestParameters: DayComponentsMapperDayBlueprintUuidComponentUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling dayComponentsMapperDayBlueprintUuidComponentUuidDelete().'
            );
        }

        if (requestParameters['componentUuid'] == null) {
            throw new runtime.RequiredError(
                'componentUuid',
                'Required parameter "componentUuid" was null or undefined when calling dayComponentsMapperDayBlueprintUuidComponentUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/day-components-mapper/{day_blueprint_uuid}/{component_uuid}`.replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))).replace(`{${"component_uuid"}}`, encodeURIComponent(String(requestParameters['componentUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete day-component mapping (admin only)
     */
    async dayComponentsMapperDayBlueprintUuidComponentUuidDelete(requestParameters: DayComponentsMapperDayBlueprintUuidComponentUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dayComponentsMapperDayBlueprintUuidComponentUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific day-component mapping
     */
    async dayComponentsMapperDayBlueprintUuidComponentUuidGetRaw(requestParameters: DayComponentsMapperDayBlueprintUuidComponentUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayComponentsMapper>> {
        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling dayComponentsMapperDayBlueprintUuidComponentUuidGet().'
            );
        }

        if (requestParameters['componentUuid'] == null) {
            throw new runtime.RequiredError(
                'componentUuid',
                'Required parameter "componentUuid" was null or undefined when calling dayComponentsMapperDayBlueprintUuidComponentUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/day-components-mapper/{day_blueprint_uuid}/{component_uuid}`.replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))).replace(`{${"component_uuid"}}`, encodeURIComponent(String(requestParameters['componentUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayComponentsMapperFromJSON(jsonValue));
    }

    /**
     * Get a specific day-component mapping
     */
    async dayComponentsMapperDayBlueprintUuidComponentUuidGet(requestParameters: DayComponentsMapperDayBlueprintUuidComponentUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayComponentsMapper> {
        const response = await this.dayComponentsMapperDayBlueprintUuidComponentUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a day-component mapping (admin only)
     */
    async dayComponentsMapperDayBlueprintUuidComponentUuidPutRaw(requestParameters: DayComponentsMapperDayBlueprintUuidComponentUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayComponentsMapper>> {
        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling dayComponentsMapperDayBlueprintUuidComponentUuidPut().'
            );
        }

        if (requestParameters['componentUuid'] == null) {
            throw new runtime.RequiredError(
                'componentUuid',
                'Required parameter "componentUuid" was null or undefined when calling dayComponentsMapperDayBlueprintUuidComponentUuidPut().'
            );
        }

        if (requestParameters['dayComponentsMapper'] == null) {
            throw new runtime.RequiredError(
                'dayComponentsMapper',
                'Required parameter "dayComponentsMapper" was null or undefined when calling dayComponentsMapperDayBlueprintUuidComponentUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/day-components-mapper/{day_blueprint_uuid}/{component_uuid}`.replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))).replace(`{${"component_uuid"}}`, encodeURIComponent(String(requestParameters['componentUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DayComponentsMapperToJSON(requestParameters['dayComponentsMapper']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayComponentsMapperFromJSON(jsonValue));
    }

    /**
     * Update a day-component mapping (admin only)
     */
    async dayComponentsMapperDayBlueprintUuidComponentUuidPut(requestParameters: DayComponentsMapperDayBlueprintUuidComponentUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayComponentsMapper> {
        const response = await this.dayComponentsMapperDayBlueprintUuidComponentUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all day-component mappings
     */
    async dayComponentsMapperGetRaw(requestParameters: DayComponentsMapperGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DayComponentsMapper>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling dayComponentsMapperGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling dayComponentsMapperGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/day-components-mapper`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DayComponentsMapperFromJSON));
    }

    /**
     * List all day-component mappings
     */
    async dayComponentsMapperGet(requestParameters: DayComponentsMapperGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DayComponentsMapper>> {
        const response = await this.dayComponentsMapperGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new day-component mapping (admin only)
     */
    async dayComponentsMapperPostRaw(requestParameters: DayComponentsMapperPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayComponentsMapper>> {
        if (requestParameters['dayComponentsMapper'] == null) {
            throw new runtime.RequiredError(
                'dayComponentsMapper',
                'Required parameter "dayComponentsMapper" was null or undefined when calling dayComponentsMapperPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/day-components-mapper`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DayComponentsMapperToJSON(requestParameters['dayComponentsMapper']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayComponentsMapperFromJSON(jsonValue));
    }

    /**
     * Create a new day-component mapping (admin only)
     */
    async dayComponentsMapperPost(requestParameters: DayComponentsMapperPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayComponentsMapper> {
        const response = await this.dayComponentsMapperPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a day instance
     */
    async dayInstancesDayBlueprintUuidUserUuidDeleteRaw(requestParameters: DayInstancesDayBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling dayInstancesDayBlueprintUuidUserUuidDelete().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling dayInstancesDayBlueprintUuidUserUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/day-instances/{day_blueprint_uuid}/{user_uuid}`.replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a day instance
     */
    async dayInstancesDayBlueprintUuidUserUuidDelete(requestParameters: DayInstancesDayBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dayInstancesDayBlueprintUuidUserUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific day instance
     */
    async dayInstancesDayBlueprintUuidUserUuidGetRaw(requestParameters: DayInstancesDayBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayDTO>> {
        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling dayInstancesDayBlueprintUuidUserUuidGet().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling dayInstancesDayBlueprintUuidUserUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/day-instances/{day_blueprint_uuid}/{user_uuid}`.replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayDTOFromJSON(jsonValue));
    }

    /**
     * Get a specific day instance
     */
    async dayInstancesDayBlueprintUuidUserUuidGet(requestParameters: DayInstancesDayBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayDTO> {
        const response = await this.dayInstancesDayBlueprintUuidUserUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a day instance
     */
    async dayInstancesDayBlueprintUuidUserUuidPutRaw(requestParameters: DayInstancesDayBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayDTO>> {
        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling dayInstancesDayBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling dayInstancesDayBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['dayInstance'] == null) {
            throw new runtime.RequiredError(
                'dayInstance',
                'Required parameter "dayInstance" was null or undefined when calling dayInstancesDayBlueprintUuidUserUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/day-instances/{day_blueprint_uuid}/{user_uuid}`.replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DayInstanceToJSON(requestParameters['dayInstance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayDTOFromJSON(jsonValue));
    }

    /**
     * Update a day instance
     */
    async dayInstancesDayBlueprintUuidUserUuidPut(requestParameters: DayInstancesDayBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayDTO> {
        const response = await this.dayInstancesDayBlueprintUuidUserUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all day instances
     */
    async dayInstancesGetRaw(requestParameters: DayInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DayDTO>>> {
        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling dayInstancesGet().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling dayInstancesGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling dayInstancesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/day-instances`.replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DayDTOFromJSON));
    }

    /**
     * List all day instances
     */
    async dayInstancesGet(requestParameters: DayInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DayDTO>> {
        const response = await this.dayInstancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a day instance
     */
    async dayInstancesPostRaw(requestParameters: DayInstancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayDTO>> {
        if (requestParameters['dayInstance'] == null) {
            throw new runtime.RequiredError(
                'dayInstance',
                'Required parameter "dayInstance" was null or undefined when calling dayInstancesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/day-instances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DayInstanceToJSON(requestParameters['dayInstance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayDTOFromJSON(jsonValue));
    }

    /**
     * Create a day instance
     */
    async dayInstancesPost(requestParameters: DayInstancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayDTO> {
        const response = await this.dayInstancesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete day template (admin only)
     */
    async daysDayBlueprintUuidDeleteRaw(requestParameters: DaysDayBlueprintUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling daysDayBlueprintUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/days/{day_blueprint_uuid}`.replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete day template (admin only)
     */
    async daysDayBlueprintUuidDelete(requestParameters: DaysDayBlueprintUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.daysDayBlueprintUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get day template details
     */
    async daysDayBlueprintUuidGetRaw(requestParameters: DaysDayBlueprintUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayBlueprint>> {
        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling daysDayBlueprintUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/days/{day_blueprint_uuid}`.replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayBlueprintFromJSON(jsonValue));
    }

    /**
     * Get day template details
     */
    async daysDayBlueprintUuidGet(requestParameters: DaysDayBlueprintUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayBlueprint> {
        const response = await this.daysDayBlueprintUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update day template (admin only)
     */
    async daysDayBlueprintUuidPutRaw(requestParameters: DaysDayBlueprintUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayBlueprint>> {
        if (requestParameters['dayBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprintUuid',
                'Required parameter "dayBlueprintUuid" was null or undefined when calling daysDayBlueprintUuidPut().'
            );
        }

        if (requestParameters['dayBlueprint'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprint',
                'Required parameter "dayBlueprint" was null or undefined when calling daysDayBlueprintUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/days/{day_blueprint_uuid}`.replace(`{${"day_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['dayBlueprintUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DayBlueprintToJSON(requestParameters['dayBlueprint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayBlueprintFromJSON(jsonValue));
    }

    /**
     * Update day template (admin only)
     */
    async daysDayBlueprintUuidPut(requestParameters: DaysDayBlueprintUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayBlueprint> {
        const response = await this.daysDayBlueprintUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List day templates
     */
    async daysGetRaw(requestParameters: DaysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DayBlueprint>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling daysGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling daysGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/days`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DayBlueprintFromJSON));
    }

    /**
     * List day templates
     */
    async daysGet(requestParameters: DaysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DayBlueprint>> {
        const response = await this.daysGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create day template (admin only)
     */
    async daysPostRaw(requestParameters: DaysPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DayBlueprint>> {
        if (requestParameters['dayBlueprint'] == null) {
            throw new runtime.RequiredError(
                'dayBlueprint',
                'Required parameter "dayBlueprint" was null or undefined when calling daysPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("admin_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/days`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DayBlueprintToJSON(requestParameters['dayBlueprint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DayBlueprintFromJSON(jsonValue));
    }

    /**
     * Create day template (admin only)
     */
    async daysPost(requestParameters: DaysPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DayBlueprint> {
        const response = await this.daysPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
