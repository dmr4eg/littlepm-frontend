/* tslint:disable */
/* eslint-disable */
/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Members,
} from '../models/index';
import {
    MembersFromJSON,
    MembersToJSON,
} from '../models/index';

export interface MembersGetRequest {
    limit: number;
    offset: number;
}

export interface MembersPostRequest {
    members: Members;
}

export interface MembersProjectBlueprintUuidUserUuidDeleteRequest {
    projectBlueprintUuid: string;
    userUuid: string;
}

export interface MembersProjectBlueprintUuidUserUuidGetRequest {
    projectBlueprintUuid: string;
    userUuid: string;
}

export interface MembersProjectBlueprintUuidUserUuidPutRequest {
    projectBlueprintUuid: string;
    userUuid: string;
    members: Members;
}

/**
 * 
 */
export class MembersApi extends runtime.BaseAPI {

    /**
     * List all members records
     */
    async membersGetRaw(requestParameters: MembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Members>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling membersGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling membersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MembersFromJSON));
    }

    /**
     * List all members records
     */
    async membersGet(requestParameters: MembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Members>> {
        const response = await this.membersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new members record
     */
    async membersPostRaw(requestParameters: MembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Members>> {
        if (requestParameters['members'] == null) {
            throw new runtime.RequiredError(
                'members',
                'Required parameter "members" was null or undefined when calling membersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembersToJSON(requestParameters['members']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembersFromJSON(jsonValue));
    }

    /**
     * Create new members record
     */
    async membersPost(requestParameters: MembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Members> {
        const response = await this.membersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a member record
     */
    async membersProjectBlueprintUuidUserUuidDeleteRaw(requestParameters: MembersProjectBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling membersProjectBlueprintUuidUserUuidDelete().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling membersProjectBlueprintUuidUserUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{project_blueprint_uuid}/{user_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a member record
     */
    async membersProjectBlueprintUuidUserUuidDelete(requestParameters: MembersProjectBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.membersProjectBlueprintUuidUserUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get one member record
     */
    async membersProjectBlueprintUuidUserUuidGetRaw(requestParameters: MembersProjectBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Members>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling membersProjectBlueprintUuidUserUuidGet().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling membersProjectBlueprintUuidUserUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{project_blueprint_uuid}/{user_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembersFromJSON(jsonValue));
    }

    /**
     * Get one member record
     */
    async membersProjectBlueprintUuidUserUuidGet(requestParameters: MembersProjectBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Members> {
        const response = await this.membersProjectBlueprintUuidUserUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a member record
     */
    async membersProjectBlueprintUuidUserUuidPutRaw(requestParameters: MembersProjectBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Members>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling membersProjectBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling membersProjectBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['members'] == null) {
            throw new runtime.RequiredError(
                'members',
                'Required parameter "members" was null or undefined when calling membersProjectBlueprintUuidUserUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{project_blueprint_uuid}/{user_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembersToJSON(requestParameters['members']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembersFromJSON(jsonValue));
    }

    /**
     * Update a member record
     */
    async membersProjectBlueprintUuidUserUuidPut(requestParameters: MembersProjectBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Members> {
        const response = await this.membersProjectBlueprintUuidUserUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
