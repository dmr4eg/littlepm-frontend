/* tslint:disable */
/* eslint-disable */
/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Finances,
} from '../models/index';
import {
    FinancesFromJSON,
    FinancesToJSON,
} from '../models/index';

export interface FinancesGetRequest {
    limit: number;
    offset: number;
}

export interface FinancesPostRequest {
    finances: Finances;
}

export interface FinancesProjectBlueprintUuidUserUuidCalculatePutRequest {
    projectBlueprintUuid: string;
    userUuid: string;
    finances: Finances;
}

export interface FinancesProjectBlueprintUuidUserUuidDeleteRequest {
    projectBlueprintUuid: string;
    userUuid: string;
}

export interface FinancesProjectBlueprintUuidUserUuidGetRequest {
    projectBlueprintUuid: string;
    userUuid: string;
}

export interface FinancesProjectBlueprintUuidUserUuidPutRequest {
    projectBlueprintUuid: string;
    userUuid: string;
    finances: Finances;
}

/**
 * 
 */
export class FinancesApi extends runtime.BaseAPI {

    /**
     * List all finances records
     */
    async financesGetRaw(requestParameters: FinancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Finances>>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling financesGet().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling financesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/finances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FinancesFromJSON));
    }

    /**
     * List all finances records
     */
    async financesGet(requestParameters: FinancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Finances>> {
        const response = await this.financesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new finances record
     */
    async financesPostRaw(requestParameters: FinancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Finances>> {
        if (requestParameters['finances'] == null) {
            throw new runtime.RequiredError(
                'finances',
                'Required parameter "finances" was null or undefined when calling financesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/finances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FinancesToJSON(requestParameters['finances']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancesFromJSON(jsonValue));
    }

    /**
     * Create new finances record
     */
    async financesPost(requestParameters: FinancesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Finances> {
        const response = await this.financesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Calculate or recalculate finances
     */
    async financesProjectBlueprintUuidUserUuidCalculatePutRaw(requestParameters: FinancesProjectBlueprintUuidUserUuidCalculatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Finances>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling financesProjectBlueprintUuidUserUuidCalculatePut().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling financesProjectBlueprintUuidUserUuidCalculatePut().'
            );
        }

        if (requestParameters['finances'] == null) {
            throw new runtime.RequiredError(
                'finances',
                'Required parameter "finances" was null or undefined when calling financesProjectBlueprintUuidUserUuidCalculatePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/finances/{project_blueprint_uuid}/{user_uuid}/calculate`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FinancesToJSON(requestParameters['finances']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancesFromJSON(jsonValue));
    }

    /**
     * Calculate or recalculate finances
     */
    async financesProjectBlueprintUuidUserUuidCalculatePut(requestParameters: FinancesProjectBlueprintUuidUserUuidCalculatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Finances> {
        const response = await this.financesProjectBlueprintUuidUserUuidCalculatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete finances record
     */
    async financesProjectBlueprintUuidUserUuidDeleteRaw(requestParameters: FinancesProjectBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling financesProjectBlueprintUuidUserUuidDelete().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling financesProjectBlueprintUuidUserUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/finances/{project_blueprint_uuid}/{user_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete finances record
     */
    async financesProjectBlueprintUuidUserUuidDelete(requestParameters: FinancesProjectBlueprintUuidUserUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financesProjectBlueprintUuidUserUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get finances record
     */
    async financesProjectBlueprintUuidUserUuidGetRaw(requestParameters: FinancesProjectBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Finances>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling financesProjectBlueprintUuidUserUuidGet().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling financesProjectBlueprintUuidUserUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/finances/{project_blueprint_uuid}/{user_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancesFromJSON(jsonValue));
    }

    /**
     * Get finances record
     */
    async financesProjectBlueprintUuidUserUuidGet(requestParameters: FinancesProjectBlueprintUuidUserUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Finances> {
        const response = await this.financesProjectBlueprintUuidUserUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update finances record
     */
    async financesProjectBlueprintUuidUserUuidPutRaw(requestParameters: FinancesProjectBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Finances>> {
        if (requestParameters['projectBlueprintUuid'] == null) {
            throw new runtime.RequiredError(
                'projectBlueprintUuid',
                'Required parameter "projectBlueprintUuid" was null or undefined when calling financesProjectBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['userUuid'] == null) {
            throw new runtime.RequiredError(
                'userUuid',
                'Required parameter "userUuid" was null or undefined when calling financesProjectBlueprintUuidUserUuidPut().'
            );
        }

        if (requestParameters['finances'] == null) {
            throw new runtime.RequiredError(
                'finances',
                'Required parameter "finances" was null or undefined when calling financesProjectBlueprintUuidUserUuidPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user_jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/finances/{project_blueprint_uuid}/{user_uuid}`.replace(`{${"project_blueprint_uuid"}}`, encodeURIComponent(String(requestParameters['projectBlueprintUuid']))).replace(`{${"user_uuid"}}`, encodeURIComponent(String(requestParameters['userUuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FinancesToJSON(requestParameters['finances']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancesFromJSON(jsonValue));
    }

    /**
     * Update finances record
     */
    async financesProjectBlueprintUuidUserUuidPut(requestParameters: FinancesProjectBlueprintUuidUserUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Finances> {
        const response = await this.financesProjectBlueprintUuidUserUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
