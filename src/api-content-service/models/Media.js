/**
 * Project & Day API
 * An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Media model module.
 * @module api-content-service/models/Media
 * @version 1.0.0
 */
class Media {
    /**
     * Constructs a new <code>Media</code>.
     * @alias module:api-content-service/models/Media
     * @param mediaUUID {String} UUID for a Media resource
     * @param type {module:api-content-service/models/Media.TypeEnum} 
     * @param title {String} 
     */
    constructor(mediaUUID, type, title) { 
        
        Media.initialize(this, mediaUUID, type, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mediaUUID, type, title) { 
        obj['mediaUUID'] = mediaUUID;
        obj['type'] = type;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Media</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:api-content-service/models/Media} obj Optional instance to populate.
     * @return {module:api-content-service/models/Media} The populated <code>Media</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Media();

            if (data.hasOwnProperty('mediaUUID')) {
                obj['mediaUUID'] = ApiClient.convertToType(data['mediaUUID'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Media</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Media</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Media.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['mediaUUID'] && !(typeof data['mediaUUID'] === 'string' || data['mediaUUID'] instanceof String)) {
            throw new Error("Expected the field `mediaUUID` to be a primitive type in the JSON string but got " + data['mediaUUID']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

Media.RequiredProperties = ["mediaUUID", "type", "title"];

/**
 * UUID for a Media resource
 * @member {String} mediaUUID
 */
Media.prototype['mediaUUID'] = undefined;

/**
 * @member {module:api-content-service/models/Media.TypeEnum} type
 */
Media.prototype['type'] = undefined;

/**
 * URL for the media file
 * @member {String} url
 */
Media.prototype['url'] = undefined;

/**
 * @member {String} title
 */
Media.prototype['title'] = undefined;

/**
 * @member {String} description
 */
Media.prototype['description'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Media['TypeEnum'] = {

    /**
     * value: "video"
     * @const
     */
    "video": "video",

    /**
     * value: "image"
     * @const
     */
    "image": "image"
};



export default Media;

